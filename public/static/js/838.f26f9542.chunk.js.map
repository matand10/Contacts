{"version":3,"file":"static/js/838.f26f9542.chunk.js","mappings":"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","sources":["components/Contact/ContactInfo.js","components/Core-Components/LoadingButton/LoadingButton.js","store/payment/contact.payment-action.js","pages/Cart/Cart.js","model/agent/Agent.js","model/contact/constContact.js","model/contact/Contact.js","model/contactTransaction/ContactTransaction.js","constants/json.js","model/user/UserInfo.js","model/creditTransaction/CreditTransaction.js","services/creditTransaction.service.js","services/payment.service.js","store/cart/cart-action.js"],"sourcesContent":["import { Link } from \"react-router-dom\"\r\nimport { DUMMY_USER_URL } from \"../../config/config\"\r\n\r\nconst ContactInfo = ({ contact }) => {\r\n    return (\r\n        <>\r\n            <div className=\"list-product__image\">\r\n                <Link to={process.env.PUBLIC_URL + `/contact/${contact._id}`}>\r\n                    <img\r\n                        src={contact?.img?.url || DUMMY_USER_URL}\r\n                        className=\"img-fluid img__circle\"\r\n                        alt=\"\"\r\n                    />\r\n                </Link>\r\n            </div>\r\n\r\n            <div className=\"list-product__content\">\r\n                <h3 className=\"title\">\r\n                    <Link to={process.env.PUBLIC_URL + `/contact/${contact._id}`}>\r\n                        {contact.category}\r\n                    </Link>\r\n                </h3>\r\n                <span className=\"category\">\r\n                    {contact.company}\r\n                </span>\r\n                <span className=\"category\">{contact.jobTitle}</span>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ContactInfo","\r\n\r\nconst LoadingButton = ({ onClick, disabled, isLoading, children, className }) => {\r\n\r\n    const handleClick = () => {\r\n        if (onClick) onClick()\r\n    }\r\n\r\n    return (\r\n        <button\r\n            className={`flex align-center justify-center ${className}`}\r\n            disabled={disabled || isLoading}\r\n            onClick={handleClick}\r\n        >\r\n            {isLoading ? (\r\n                <div className=\"spinner-border\" role=\"status\">\r\n                    <span className=\"visually-hidden\">Loading...</span>\r\n                </div>\r\n            ) : (\r\n                children\r\n            )}\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default LoadingButton","import { paymentService } from \"../../services/payment.service\";\r\nimport { saveCurrentUser } from \"../user/user-slice\";\r\n\r\nexport const createContactsTransaction = async (dispatch, contacts) => {\r\n    try {\r\n        const updatedUser = await paymentService.createContactsPurchase(contacts)\r\n        if (updatedUser) dispatch(saveCurrentUser(updatedUser))\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}","import React, { Fragment } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { ReactSVG } from \"react-svg\";\r\nimport { Breadcrumb } from \"../../components\";\r\nimport ContactInfo from \"../../components/Contact/ContactInfo\";\r\nimport { RiDeleteBin6Line } from 'react-icons/ri'\r\nimport { deleteAllFromCartAction, removeContactToCartAction } from \"../../store/cart/cart-action\";\r\nimport cogoToast from \"@hasanm95/cogo-toast\";\r\nimport { utilService } from \"../../services/util.service\";\r\nimport { createContactsTransaction } from \"../../store/payment/contact.payment-action\";\r\nimport { ConstTranslate } from \"../../constants/translate\";\r\nimport LoadingButton from \"../../components/Core-Components/LoadingButton/LoadingButton\";\r\nimport { useState } from \"react\";\r\n\r\nconst Cart = () => {\r\n  const { contactCart } = useSelector((state) => state.cart);\r\n  const { currentUser } = useSelector((state) => state.user)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const dispatch = useDispatch()\r\n\r\n  const getCartTotalPrice = () => {\r\n    if (!contactCart.length) return Number(2).toFixed(2)\r\n    return contactCart.reduce((acc, contact) => acc += contact.price, 0).toFixed(2)\r\n  }\r\n\r\n  const onRemove = (contactId) => {\r\n    removeContactToCartAction(dispatch, contactId)\r\n  }\r\n\r\n  const onPurchase = async () => {\r\n    setIsLoading(true)\r\n    if (!utilService.isUserHasCredits(contactCart)) {\r\n      return cogoToast.error(\"Not enough credits\", { position: \"top-center\" })\r\n    }\r\n\r\n    try {\r\n      await createContactsTransaction(dispatch, contactCart)\r\n      deleteAllFromCartAction(dispatch)\r\n      return cogoToast.success(\"Contact purchased\", { position: \"top-center\" })\r\n    } catch (err) {\r\n      return cogoToast.error(\"Cannot purchase contact\", { position: \"top-center\" })\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  // const isUserHasCredits = () => {\r\n  //   const sum = contactCart.reduce((acc, contact) => acc += contact.price, 0)\r\n  //   if (currentUser.credits >= utilService.getContactValueInCredit(sum)) return true\r\n  //   else return false\r\n  // }\r\n\r\n  return (\r\n    <div className=\"body-wrapper space-pb--120 backgrounds__white-top\">\r\n      <Breadcrumb pageTitle=\"Cart\" />\r\n      {contactCart && contactCart.length >= 1 ? (\r\n        <Fragment>\r\n          {contactCart && contactCart.length >= 1 && contactCart.map((contact) => {\r\n            return (\r\n              <div key={contact._id} className=\"list-product border-bottom--medium\">\r\n                <ContactInfo contact={contact} />\r\n\r\n                <div className=\"flex align-center gap--25\">\r\n                  <div className=\"list-product__price\">\r\n                    <h2>{contact.price}$</h2>\r\n                    <p>22.07.23</p>\r\n                  </div>\r\n\r\n                  <button className=\"list-product__button icon-color__error\" onClick={() => onRemove(contact._id)}>\r\n                    <RiDeleteBin6Line />\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            )\r\n          })}\r\n\r\n          <div className=\"grand-total\">\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col-12\">\r\n                  <h4 className=\"grand-total-title\">\r\n                    Credits: <span>{currentUser.credits}$</span>\r\n                  </h4>\r\n                  <h4 className=\"grand-total-title\">\r\n                    Total Contacts: <span>{contactCart.length}</span>\r\n                  </h4>\r\n                  <h4 className=\"grand-total-title\">\r\n                    Total Price: <span>{getCartTotalPrice()}$</span>\r\n                  </h4>\r\n                  {/* <Link to={process.env.PUBLIC_URL + \"/checkout\"}>\r\n                    Proceed to Checkout\r\n                  </Link> */}\r\n                  <LoadingButton className={'button button__h-60'} onClick={onPurchase} isLoading={isLoading}>\r\n                    {ConstTranslate.PROCEED_TO_CHECKOUT}\r\n                  </LoadingButton>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Fragment>\r\n      ) : (\r\n        <div className=\"no-items-found\">\r\n          <div className=\"no-items-found__image\">\r\n            <ReactSVG\r\n              src={process.env.PUBLIC_URL + \"/assets/img/icons/cart.svg\"}\r\n            />\r\n          </div>\r\n          <div className=\"no-items-found__content\">\r\n            <p>\r\n              No Items in the cart.{\" \"}\r\n              <Link to={process.env.PUBLIC_URL + \"/shop\"}>Add Some</Link>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Cart;\r\n","import { constUser } from \"../user/constUser\"\r\n\r\n\r\n\r\nexport class Agent {\r\n    _id\r\n    fullname\r\n    imgUrl\r\n\r\n    constructor(user) {\r\n        this._id = user[constUser._ID]\r\n        this.fullname = user[constUser.FULLNAME]\r\n        this.imgUrl = user[constUser.IMG_URL]\r\n    }\r\n}","\r\nconst DESCRIPTION = 'desc'\r\nconst IMG = 'img'\r\nconst JOB_TITLE = 'jobTitle'\r\nconst PRICE = 'price'\r\nconst IN_STOCK = 'inStock'\r\nconst NAME = 'name'\r\nconst FAMILY_NAME = 'familyName'\r\nconst EMAILS = 'emails'\r\nconst MOBILE = 'mobile'\r\nconst PHONE = 'phone'\r\nconst LINKEDIN_LINKS = 'linkedinLink'\r\nconst AGENT = 'agent'\r\nconst CATEGORY = 'category'\r\nconst COUNTRY = 'country'\r\nconst COMPANY = 'company'\r\nconst ID = '_id'\r\nconst AGENTS = 'agents'\r\nconst CREATED_AT = 'createdAt'\r\nconst TRANSACTION_HISTORY = 'transactionHistory'\r\nconst EMAIL = 'email'\r\n\r\n\r\nexport const constContact = {\r\n    DESCRIPTION,\r\n    IMG,\r\n    JOB_TITLE,\r\n    PRICE,\r\n    IN_STOCK,\r\n    NAME,\r\n    FAMILY_NAME,\r\n    EMAILS,\r\n    MOBILE,\r\n    PHONE,\r\n    LINKEDIN_LINKS,\r\n    AGENT,\r\n    CATEGORY,\r\n    COUNTRY,\r\n    COMPANY,\r\n    ID,\r\n    AGENTS,\r\n    CREATED_AT,\r\n    TRANSACTION_HISTORY,\r\n    EMAIL,\r\n}","import { Agent } from \"../agent/Agent\"\r\nimport { Email } from \"../email/Email\"\r\nimport { constContact } from \"./constContact\"\r\n\r\n\r\nexport class Contact {\r\n    _id\r\n    desc\r\n    img\r\n    jobTitle\r\n    price\r\n    inStock\r\n    name\r\n    familyName\r\n    emails = []\r\n    mobile\r\n    phone\r\n    linkedinLink\r\n    agent\r\n    category\r\n    country\r\n    company\r\n    createdAt\r\n    transactionHistory\r\n\r\n    constructor(contact) {\r\n        this._id = contact[constContact.ID]\r\n        this.desc = contact[constContact.DESCRIPTION]\r\n        this.img = contact[constContact.IMG]\r\n        this.jobTitle = contact[constContact.JOB_TITLE]\r\n        this.price = contact[constContact.PRICE]\r\n        this.inStock = contact[constContact.IN_STOCK]\r\n        this.name = contact[constContact.NAME]\r\n        this.familyName = contact[constContact.FAMILY_NAME]\r\n        this.mobile = contact[constContact.MOBILE]\r\n        this.phone = contact[constContact.PHONE]\r\n        this.linkedinLink = contact[constContact.LINKEDIN_LINKS]\r\n        this.category = contact[constContact.CATEGORY]\r\n        this.country = contact[constContact.COUNTRY]\r\n        this.company = contact[constContact.COMPANY]\r\n        this.createdAt = contact[constContact.CREATED_AT]\r\n        this.transactionHistory = contact[constContact.TRANSACTION_HISTORY]\r\n        this.agent = contact[constContact.AGENT] ? new Agent(contact[constContact.AGENT]) : null\r\n        this.emails = contact[constContact.EMAILS] || []\r\n    }\r\n}","import { CREDIT_VALUE } from \"../../config/config\"\r\nimport { Contact } from '../../model/contact/Contact';\r\n\r\n\r\nexport class ContactTransaction {\r\n    contact\r\n    priceInCredit\r\n    createdAt = new Date()\r\n    userId\r\n\r\n    constructor(contact, userId) {\r\n        this.contact = new Contact(contact)\r\n        this.priceInCredit = contact.price / CREDIT_VALUE\r\n        this.userId = userId\r\n    }\r\n}","export class ConstJson {\r\n    static EMPTY_STRING = ''\r\n    static TITLE = 'title'\r\n    static CATEGORY = 'category'\r\n    static CATEGORIES = 'categories'\r\n    static JOBTITLE = 'jobTitle'\r\n    static COUNTRY = 'country'\r\n    static NAME = 'name'\r\n    static FAMILY_NAME = 'familyName'\r\n    static DESC = 'desc'\r\n    static PRICE = 'price'\r\n    static IN_STOCK = 'inStock'\r\n    static EMAIL = 'email'\r\n    static PHONE = 'phone'\r\n    static LINKEDIN_LINK = 'linkedinLink'\r\n    static COMPANY = 'company'\r\n    static _ID = '_id'\r\n    static IMG_URL = 'imgUrl'\r\n    static IMG = 'img'\r\n    static COMPANIES = 'companies'\r\n    static JOB_TITLES = 'jobTitles'\r\n    static TERRITORIES = 'territories'\r\n    static EXPENSES = 'expenses'\r\n    static INCOME = 'income'\r\n    static PERMISSIONS = 'permissions'\r\n    static AGENT = 'agent'\r\n    static USER = 'user'\r\n    static IS_APPROVED = 'isApproved'\r\n    static CREATED_AT = 'createdAt'\r\n    static UPDATED_AT = 'updatedAt'\r\n    static BUYER = 'buyer'\r\n    static CONTACT_NAME = 'contactName'\r\n    static CONTACT_COMPANY = 'contactCompany'\r\n    static CONTACT_TITLE = 'contactTitle'\r\n    static IS_ACTIVE = 'isActive'\r\n    static GENDER = 'gender'\r\n    static EMAIL_TYPE = 'emailType'\r\n    static EMAIL_URL = 'emailUrl'\r\n    static OK = 'ok'\r\n    static FULLNAME = 'fullname'\r\n    static USERNAME = 'username'\r\n    static ACTION = 'action'\r\n    static APPROVE_STATUS = 'approveStatus'\r\n}","import { constUser } from \"./constUser\"\r\n\r\n\r\nexport class UserInfo {\r\n    userId\r\n    imgUrl\r\n    fullname\r\n\r\n    constructor(user) {\r\n        this.userId = user[constUser._ID]\r\n        this.imgUrl = user[constUser.IMG_URL]\r\n        this.fullname = user[constUser.FULLNAME]\r\n    }\r\n}","import { ConstJson } from \"../../constants/json\"\r\nimport { UserInfo } from \"../user/UserInfo\"\r\n\r\n\r\nexport class CreditTransaction {\r\n    userInfo\r\n    type\r\n    creditId\r\n    creditName\r\n    creditQuantity\r\n    packagePrice\r\n    createdAt = new Date()\r\n\r\n    constructor({ credit, type, user }) {\r\n        this.userInfo = new UserInfo(user)\r\n        this.type = type\r\n        this.creditId = credit[ConstJson._ID]\r\n        this.creditName = credit.name\r\n        this.creditQuantity = credit.quantity\r\n        this.packagePrice = credit.price\r\n    }\r\n}","import { CreditTransactionEP } from \"../config/config\"\r\nimport { CreditTransaction } from \"../model/creditTransaction/CreditTransaction\"\r\nimport { httpService } from \"./http.service\"\r\nimport { userService } from \"./user.service\"\r\n\r\n\r\nexport const creditTransactionService = {\r\n    query,\r\n    createCreditTransaction,\r\n}\r\n\r\nasync function query(filterBy = {}) {\r\n    try {\r\n        const res = await httpService.get(CreditTransactionEP.default, filterBy)\r\n        if (res.status === 'ok') return res.content\r\n        else return { error: 'Cannot get credits transactions' }\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nasync function createCreditTransaction(credit) {\r\n    const content = { user: userService.getLoggedinUser(), credit, type: 'credit_purchase' }\r\n    return _createCreditTransaction(content)\r\n}\r\n\r\nfunction _createCreditTransaction({ user, credit, type }) {\r\n    return new CreditTransaction({ credit, user, type })\r\n}","import { PaymentEP } from \"../config/config\"\r\nimport { contactTransType } from \"../constants/contactTransType\"\r\nimport { PaymentStatus } from \"../constants/payment\"\r\nimport { PurchasesType } from \"../constants/purchase\"\r\nimport { Contact } from \"../model/contact/Contact\"\r\nimport { ContactTransaction } from \"../model/contactTransaction/ContactTransaction\"\r\nimport { Purchase } from \"../model/purchase/Purchase\"\r\nimport { creditTransactionService } from \"./creditTransaction.service\"\r\nimport { httpService } from \"./http.service\"\r\nimport { userService } from \"./user.service\"\r\nimport { utilService } from \"./util.service\"\r\n\r\nexport const paymentService = {\r\n    query,\r\n    create,\r\n    createOne,\r\n    createContactsPurchase,\r\n    removeContact,\r\n}\r\n\r\nexport async function query(filterBy = {}) {\r\n    try {\r\n        const res = await httpService.get(PaymentEP.default)\r\n        if (res.status === 'ok') return res.content\r\n        else return new Error('Cannot get territories')\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nasync function createOne(credit) {\r\n    try {\r\n        const transaction = await creditTransactionService.createCreditTransaction(credit)\r\n        const res = await httpService.post(`${PaymentEP.default}/create`, [transaction])\r\n        if (res.status === 'ok') return res.content\r\n        else throw new Error(\"Couldn't purchase credit\")\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\n\r\nasync function create(credits) {\r\n    try {\r\n        const transactions = await Promise.all(\r\n            credits.map(credit => creditTransactionService.createCreditTransaction(credit))\r\n        )\r\n        const res = await httpService.post(`${PaymentEP.default}/create`, transactions)\r\n        if (res.status === 'ok') return res.content\r\n        else throw new Error(\"Couldn't create territory\")\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nasync function createContactsPurchase(contacts) {\r\n    try {\r\n        const userId = userService.getLoggedinUser()._id\r\n        // const items = contacts.map(contact => ({\r\n        //     type: PurchasesType.CONTACT,\r\n        //     item: contact._id,\r\n        //     seller: contact.agent?._id || undefined,\r\n        //     price: contact.price,\r\n        // }))\r\n\r\n        // const purchase = _createPurchase({\r\n        //     buyer,\r\n        //     items,\r\n        //     paymentStatus: 'pending',\r\n        //     purchasePrice: utilService.sumPrice(contacts, 'price'),\r\n        //     purchaseDate: new Date()\r\n        // })\r\n\r\n        const transactions = _createContactTransactions(contacts, userId)\r\n        const content = { transactions, userId, type: contactTransType.contactPurchase }\r\n        const res = await httpService.post(PaymentEP.contact, content)\r\n        if (res.status === 'ok') return res.content\r\n        else throw new Error('Cannot purchase')\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nasync function removeContact(transactionId, userId) {\r\n    try {\r\n        const content = { userId, transactionId, type: contactTransType.contactRemove }\r\n        const res = await httpService.post(PaymentEP.remove, content)\r\n        return res.status\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nfunction _createPurchase(purchase) {\r\n    return new Purchase(purchase)\r\n}\r\n\r\nfunction _createContactTransactions(contacts, userId) {\r\n    return contacts.map(contact => {\r\n        return _createContactTransaction(contact, userId)\r\n    })\r\n}\r\n\r\nfunction _createContactTransaction(contact, userId) {\r\n    return new ContactTransaction(contact, userId)\r\n}","import { addCreditToCart, addToContactCart, deleteAllFromCart, deleteFromCart } from \"./cart-slice\"\r\n\r\n\r\nexport const addCreditToCartAction = (dispatch, credit) => {\r\n    dispatch(addCreditToCart(credit))\r\n}\r\n\r\nexport const addContactToCartAction = (dispatch, contact) => {\r\n    dispatch(addToContactCart(contact))\r\n}\r\n\r\nexport const removeContactToCartAction = (dispatch, contactId) => {\r\n    dispatch(deleteFromCart(contactId))\r\n}\r\n\r\nexport const deleteAllFromCartAction = (dispatch) => {\r\n    dispatch(deleteAllFromCart())\r\n}"],"names":["contact","className","to","process","_id","src","img","url","DUMMY_USER_URL","alt","category","company","jobTitle","onClick","disabled","isLoading","children","role","createContactsTransaction","dispatch","contacts","paymentService","updatedUser","saveCurrentUser","contactCart","useSelector","state","cart","currentUser","user","useState","setIsLoading","useDispatch","onPurchase","utilService","cogoToast","position","deleteAllFromCartAction","pageTitle","length","Fragment","map","ContactInfo","price","contactId","removeContactToCartAction","credits","reduce","acc","toFixed","Number","LoadingButton","ConstTranslate","Agent","this","constUser","fullname","imgUrl","constContact","Contact","emails","desc","inStock","name","familyName","mobile","phone","linkedinLink","country","createdAt","transactionHistory","agent","ContactTransaction","userId","Date","priceInCredit","CREDIT_VALUE","ConstJson","EMPTY_STRING","TITLE","CATEGORY","CATEGORIES","JOBTITLE","COUNTRY","NAME","FAMILY_NAME","DESC","PRICE","IN_STOCK","EMAIL","PHONE","LINKEDIN_LINK","COMPANY","_ID","IMG_URL","IMG","COMPANIES","JOB_TITLES","TERRITORIES","EXPENSES","INCOME","PERMISSIONS","AGENT","USER","IS_APPROVED","CREATED_AT","UPDATED_AT","BUYER","CONTACT_NAME","CONTACT_COMPANY","CONTACT_TITLE","IS_ACTIVE","GENDER","EMAIL_TYPE","EMAIL_URL","OK","FULLNAME","USERNAME","ACTION","APPROVE_STATUS","UserInfo","CreditTransaction","credit","type","userInfo","creditId","creditName","creditQuantity","quantity","packagePrice","creditTransactionService","query","createCreditTransaction","filterBy","httpService","CreditTransactionEP","res","status","content","error","userService","_createCreditTransaction","create","createOne","createContactsPurchase","removeContact","PaymentEP","Error","transaction","Promise","all","transactions","_createContactTransactions","contactTransType","transactionId","_createContactTransaction","addContactToCartAction","addToContactCart","deleteFromCart","deleteAllFromCart"],"sourceRoot":""}