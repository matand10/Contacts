{"version":3,"file":"static/js/747.6148be11.chunk.js","mappings":"mIAyBA,IAvBsB,SAAH,GAA+D,IAAzDA,EAAO,EAAPA,QAASC,EAAQ,EAARA,SAAUC,EAAS,EAATA,UAAWC,EAAQ,EAARA,SAAUC,EAAS,EAATA,UAM7D,OACI,mBACIA,UAAS,2CAAsCA,GAC/CH,SAAUA,GAAYC,EACtBF,QARY,WACZA,GAASA,GACjB,EAM6B,SAEpBE,GACG,gBAAKE,UAAU,iBAAiBC,KAAK,SAAQ,UACzC,iBAAMD,UAAU,kBAAiB,0BAGrCD,GAIhB,C,8LCEA,EApBiB,SAAH,GAAuC,IAAjCG,EAAM,EAANA,OAAO,EAAD,EAAEC,cAAAA,OAAa,MAAG,EAAC,EACzC,GAA4BC,EAAAA,EAAAA,UAASD,GAAc,eAA5CE,EAAM,KAAEC,EAAS,MACxBC,EAAAA,EAAAA,YAAU,kBAAMD,EAAUH,EAAc,GAAE,CAACA,IAO3C,OACI,SAAC,IAAM,CACHP,QAPa,SAACY,GAClBF,EAAUE,GACVN,EAAOM,EACX,EAKQC,eAAe,EACfC,UAAWC,EAAAA,EAAAA,WACXC,aAAcP,EACdQ,WAAUV,GAGtB,E,kDCiDA,EA3DiB,WACb,IAAQW,GAAgBC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,IAAI,IAA/CH,YACR,GAAgCV,EAAAA,EAAAA,UAAS,MAAK,eAAvCc,EAAQ,KAAEC,EAAW,KAC5B,GAAkCf,EAAAA,EAAAA,YAAU,eAArCN,EAAS,KAAEsB,EAAY,KAC9B,GAA6CC,EAAAA,EAAAA,MAArCC,EAAQ,EAARA,SAAUC,EAAY,EAAZA,aAAcC,EAAQ,EAARA,SACxBC,GAAOC,EAAAA,EAAAA,MAAPD,GACFE,GAAWC,EAAAA,EAAAA,OAEjBrB,EAAAA,EAAAA,YAAU,WACNsB,GACJ,GAAG,IAEH,IAAMA,EAAgB,yCAAG,kHAEMC,EAAAA,EAAAA,MAAsB,CAAEC,UAAWN,EAAIO,OAAQlB,EAAYmB,MAAM,QAAlFf,EAAQ,QACDgB,QAAQf,EAAYD,EAAS,IAAG,gDAE7CiB,EAAAA,EAAAA,MAAgB,uBAAwB,CAAEC,SAAU,eAAgB,yDAE3E,kBAPqB,mCAahBC,EAAQ,yCAAG,WAAOC,GAAI,sEAEF,OAFE,SAEpBlB,GAAa,GAAK,SACZU,EAAAA,EAAAA,QAAuB,kBAAKQ,GAAI,IAAEP,UAAWN,KAAK,OACxDU,EAAAA,EAAAA,QAAkB,uBAAwB,CAAEC,SAAU,eACtDT,EAASY,EAAAA,EAAAA,YAA0Bd,GAAG,gDAEtCU,EAAAA,EAAAA,MAAgB,QAAS,CAAEC,SAAU,eAAgB,QAElC,OAFkC,UAErDhB,GAAa,GAAM,4EAE1B,gBAXa,sCAad,OACI,iBAAKpB,UAAU,oDAAmD,WAC9D,SAAC,KAAU,CAACwC,UAAWC,EAAAA,EAAAA,oBAEvB,kBAAMzC,UAAU,YAAYqC,SAAUd,EAAac,GAAU,WACzD,eAAIrC,UAAU,8BAA6B,mEAC3C,gBAAKA,UAAU,mCAAkC,UAAC,SAAC0C,EAAI,CAACxC,OAvBrD,SAACyC,GACZnB,EAAS,SAAUmB,EACvB,EAqBoFxC,cAAuB,OAARe,QAAQ,IAARA,OAAQ,EAARA,EAAUb,YAEjG,iBAAKL,UAAU,kBAAiB,WAC5B,kBAAO4C,QAAQ,UAAU5C,UAAU,yBAAwB,uBAC3D,6BAAUyB,GAAG,UAAUzB,UAAU,QAAQ6C,KAAK,IAAIC,KAAK,KAAKC,aAAsB,OAAR7B,QAAQ,IAARA,OAAQ,EAARA,EAAU8B,QAASnD,WAAUqB,EAAyB+B,UAAU,GAAU3B,EAAS,iBAG/JJ,IAAY,SAACgC,EAAA,EAAa,CAAClD,UAAW,6BAA8BF,UAAWA,EAAU,SACtF2C,EAAAA,EAAAA,YAKrB,C,mGClEaX,EAAkB,CAC3BqB,MAEH,WAEmB,gCAHhBC,OAWH,SAEqB,GAAD,iCAVD,aAQnB,OARmB,0BAApB,uGAAkC,OAAbC,EAAQ,+BAAG,CAAC,EAAC,kBAERC,EAAAA,GAAAA,IAAgBC,EAAAA,GAAAA,QAAoBF,GAAS,OAAtD,GACU,QADbG,EAAG,QACDC,OAAe,yCAASD,EAAIE,SAAO,gCAC/B,IAAIC,MAAMH,EAAII,UAAQ,+HAIzC,wBAEoB,aAQpB,OARoB,0BAArB,WAAsB1C,GAAQ,qGAEJoC,EAAAA,GAAAA,KAAiBC,EAAAA,GAAAA,OAAmBrC,GAAS,OAAtD,GACU,QADbsC,EAAG,QACDC,OAAe,yCAASD,EAAIE,SAAO,gCAC/B,IAAIC,MAAMH,EAAII,UAAQ,+HAIzC,sB,gcChBK,SAAUC,EAASC,GACvB,QAAAC,KAAAA,OAAAA,IAAO,KAAEC,EACTC,EAA+BH,EAAAA,eAA/BI,OAAAA,IAAc,EAAG,eAAcD,EAC/BE,EAAAA,EAAAA,eAAAC,OAAAA,IAAiB,IAACD,EAClBE,EAAyBP,EAAAA,aAAzBQ,OAAAA,IAAY,EAAG,WAAUD,EACzBE,EAAQT,EAAAA,SAER,OACEU,EAAAA,IAAAA,MAAAA,EAAAA,CACExE,UAAWsE,EACXG,MAAOF,EACPG,OAAQR,EACRS,KAAK,eACLC,YAAaR,EACbS,QAAQ,YACRC,MAAOf,EACPgB,OAAQhB,EACRiB,MAAM,+BAAAjF,SAENyE,EAAMS,IAAAA,OAAAA,CAAAC,EAAE,+FAGd,CCrBgB,SAAAC,EAAQnE,EAAcoE,GACpC,OAAQA,EAAOC,MACb,IAAK,cACH,OAAO,EAAP,KACKrE,GAAK,CACRsE,WAAYF,EAAOG,QACnBC,WAAYJ,EAAOK,QAGvB,IAAK,eACH,OAAO,EAAP,KACKzE,GAAK,CACR2B,YAAa3B,EAAM2B,YACnB6C,WAAY,EACZF,WAAY,OAGhB,IAAK,aACH,OAAO,EAAP,KACKtE,GAAK,CACR0E,WAAY1E,EAAMwE,WAClB7C,YAAayC,EAAOG,UAGxB,QACE,OAAOvE,EAEb,CCkDA,SAAS2E,IACP,MACqB,oBAAXC,QAA0BA,OAAOC,WAAW,qBAAqBC,SACzE,iBAAkBF,QACI,oBAAdG,WAA6BA,UAAUC,eAAiB,CAEpE,EC/FA,SAAqBC,EAAKC,QAAAA,IACnBA,IAAiBA,EAAM,CAAC,GAC7B,IAAIC,EAAWD,EAAIC,SAEnB,GAAKF,GAA2B,oBAAbG,SAAnB,CAEA,IAAIC,EAAOD,SAASC,MAAQD,SAASE,qBAAqB,QAAQ,GAC9D7B,EAAQ2B,SAASG,cAAc,SACnC9B,EAAMY,KAAO,WAEI,QAAbc,GACEE,EAAKG,WACPH,EAAKI,aAAahC,EAAO4B,EAAKG,YAKhCH,EAAKK,YAAYjC,GAGfA,EAAMkC,WACRlC,EAAMkC,WAAWC,QAAUX,EAE3BxB,EAAMiC,YAAYN,SAASS,eAAeZ,GAnBY,CAqB1D,CAzBA,CAyBA,2lBDwEM,SAAiBnC,GAAAA,IAAAA,EAAAA,EACrBlE,EAAOkE,EAAAA,QACPgD,EAAahD,EAAAA,cACbiD,EAAcjD,EAAAA,eACdkD,EAAclD,EAAAA,eACdK,EAAAA,EAAAA,aAAAvD,OAAAA,IAAe,IAACuD,EAChBE,EAAAA,EAAAA,WAAA4C,OAAAA,IAAa,IAAC5C,EACd6C,EAAAA,EAAAA,KAAAnD,OAAAA,IAAAA,EAAO,GAAEmD,EACTC,EAAgBrD,EAAAA,SAAhBjD,OAAAA,IAAQ,GAAQsG,EAChBC,EAAWtD,EAAAA,IAAXuD,OAAAA,IAAG,GAAQD,EACXE,EAAgBxD,EAAAA,YAAhByD,OAAAA,IAAW,EAAG,GAAED,EAChBE,EAAqB1D,EAAAA,cAArBrD,OAAAA,IAAgB,KAChBgE,EAAKX,EAAAA,MACL2D,EAAsC3D,EAAAA,UAAtC9D,OAAAA,IAAY,6BAA0ByH,EACtCC,EAAkB5D,EAAAA,WAAlB6D,OAAAA,IAAa,GAAKD,EAElBE,EAAiB9D,EAAAA,WAAjB+D,OAAAA,IAAa,KACbC,EAAAA,EAAAA,iBAAAC,OAAAA,IAAgB,GAAQD,EAExBE,EAAAA,EAAAA,SAAAC,OAAAA,IAAQ,EAAG,KAAID,EACfE,EAAAA,EAAAA,UAAAxH,OAAAA,IAAS,EAAG,UAASwH,EACrBC,EAAAA,EAAAA,eAAAC,OAAAA,IAAc,EAAG,GAAED,EACnBE,EAASvE,EAAAA,UACTwE,EAA8BxE,EAAAA,cAA9ByE,OAAAA,IAAa,EAAG,eAAcD,EAE9BE,EAAgB1E,EAAAA,UAAhB2E,OAAAA,IAAS,EAAG,KAAID,EAChBE,EAAsB5E,EAAAA,WAAtB6E,OAAAA,IAAU,EAAG,UAASD,EACtBE,EAAU9E,EAAAA,WACV+E,EAAAA,EAAAA,eAAAC,OAAAA,IAAiB,gBAAaD,EAE9BE,EAAAA,EAAAA,cAAAC,QAAAA,IAAgB,GAAID,EACpBE,GAAAA,EAAAA,YAAAC,QAAAA,IAAc,IAAKD,GACnBE,GAAAA,EAAAA,mBAAAC,QAAAA,IAAAA,GAAqB,YAAWD,GAChCE,GAAiBvF,EAAAA,aAAjBwF,QAAAA,IAAY,GAAG,GAAED,GACjBE,GAAYzF,EAAAA,aACZ0F,GAAAA,EAAAA,iBAAAC,QAAAA,IAAAA,GAAmB,mCAAkCD,GAErDE,GAAAA,EAAAA,aAAApF,QAAAA,IAAAA,GAAe,WAAUoF,GACzBC,GAAAA,EAAAA,eAAAC,QAAAA,IAAAA,GAAiB,SAAQD,GACzBpF,GAAQT,EAAAA,SACR+F,GAAAA,EAAAA,eAAAzF,QAAAA,IAAiB,KAACyF,GAClBC,GAAAA,EAAAA,eAAA5F,QAAAA,IAAiB,kBAAc4F,GAEzBC,GAAkEC,EAAUA,WAACC,EAAS,CAC1FzE,WAAY,EACZE,WAAY,EACZ/C,YAAa/B,EACb0E,WAAY,OAJP4E,GAAmDH,GAAAA,GAAjDpH,GAAWuH,GAAAA,YAAE5E,GAAU4E,GAAAA,WAAE1E,GAAAA,GAAAA,WAAYE,GAAAA,GAAAA,WAAcyE,GAAAA,GAAAA,GAO5D5J,EAAAA,WAAU,WACJK,GAAcuJ,GAAS,CAAE9E,KAAM,aAAcE,QAAS,GAC5D,GAAG,CAAC3E,IAEJ,IAAMwJ,GAAaC,EAAOA,SAAC,WAAM,OAAC5J,EAA6B,EAAbwG,EAAiBA,CAAW,GAAE,CAACxG,EAAewG,IAG1FqD,GAAcD,EAAAA,SAAQ,WAC1B,OAAIzJ,EAAewJ,GAAmB,EAGjC3J,GAAiB8J,KAAKC,MAAM5J,KAAkBA,EAI5C2J,KAAKE,MAAO7J,EAAeqG,EAAc,KAHb,EAA1BsD,KAAKG,KAAK9J,GAAoB,EAIxC,GAAE,CAACH,EAAeG,EAAcqG,EAAYmD,KAEvCO,GAAmBN,EAAOA,SAAC,WAAM,OAAC5J,EAA+B,EAAfG,EAAmB,EAAIA,EAAe,IAAM,CAA7D,GAAgE,CACrGH,EACAG,IAGIgK,GAAcC,EAAAA,aAClB,SAACC,GAAkB,OAAC7D,EAAa,GAAM,EAAI6D,EAAQ,EAAI,GAAMA,EAAQ7D,EAAc,MACnF,CAACA,IAGG8D,GAAoB,SAACC,GAYzB,IAXQ,MAA2BA,EAAKC,QAElCnH,EAF6BkH,EAAKE,cAEKnL,SAAS,GAAGoL,wBAAjDC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,MAAOvG,EAAAA,EAAAA,MAGfwG,EAAYjE,EAAMgE,EAAQJ,EAAUA,EAAUG,EAGhDG,EAAenB,GACboB,EAAYjB,KAAKE,MAAM3F,EAAQsF,IAE5BqB,EAAI,EAAGA,GAAKrB,GAAYqB,GAAQ,EACvC,GAAIH,GAAaE,EAAYC,EAAG,CACQF,EAA5B,IAANE,GAAWH,EAAYE,EAA0B,EACjCC,EACpB,KACD,CAGH,IAAMhG,EAAQ8F,EAAe,EAEzBA,EAAe,IAEjBpB,GAAS,CAAE9E,KAAM,cAAeE,QAAyB,IAAfgG,EAAsBnB,GAAY3E,MAAKA,IAE7EqB,GACExB,IAAYwB,EAAc8D,GAAYtF,IAAaG,EAAOuF,GAGpE,EAUMU,GAAc,SAACV,GACf1F,KACF6E,GAAS,CAAE9E,KAAM,aAAcE,QAASD,KACpC1F,GAASA,EAAQgL,GAAYtF,IAAaE,GAAYwF,GAE9D,EASMW,GAAkBtB,EAAAA,SAAQ,WAC9B,GAAIxC,EAAY,CACd,GAAIE,EAAkB,CACpB,IAAMwD,EAAgB5I,IAAeA,IAAgB2H,GACrD,OAAOhF,IAAcA,GAAaiG,EAAejG,GAAaiG,CAC/D,CACD,OAAQjG,IAAcA,IAAgB3C,IAAeA,IAAgB2H,EACtE,CAED,OAAQ3H,IAAeA,IAAgB2H,EACzC,GAAG,CAACzC,EAAYE,EAAkBzC,GAAY3C,GAAa2H,KAE3D/J,EAAAA,WAAU,WACJ+I,GAAapH,OAASkI,IACxBwB,QAAQC,MAAM,+DAEjB,GAAE,CAACvC,GAAapH,OAAQkI,KAEzB,IAAM0B,GAAcjB,EAAAA,aAClB,SAACkB,GACC,OACGzG,IAAcyG,EAAMvG,KACpB7C,IAAeoJ,EAAMrG,KACrB9E,GAAgBmL,EAAMpB,GAE3B,GACA,CAACrF,GAAYE,GAAY7C,GAAa+C,GAAY9E,EAAc+J,KAG5DqB,GAAqB3B,EAAAA,SAAQ,WACjC,OACG/E,IAAcsF,GAAYtF,KAC1B3C,IAAeiI,GAAYjI,KAC3B/B,GAAgBgK,GAAYN,GAEjC,GAAG,CAAChF,GAAYsF,GAAajI,GAAa/B,EAAc0J,KAExD,OACE2B,EAAAA,KAAAA,OAAAA,EAAAA,CAAMjM,UDpOV,qCCoOyCyE,MAAO,CAAEyH,UAAW,GAAGC,OAAAA,EAAM,MAAQ,SACxE,CAAApM,SAAAA,CAAAA,EAAAA,KAAAA,OAAAA,EAAAA,CACEC,UAAW,UDtOnBoM,uCCsO0C,YAAIpM,GACtCyE,MACE4H,EAAAA,CAAAC,OAAQzL,EAAW,GAAK,WACrB4D,GAELqC,cAAejG,OAAAA,EAAuBkK,GACtChE,eAAgBlG,OAAAA,EApEK,SAACmK,GACtBjE,GAAgBA,EAAeiE,GAE9BrF,KAELoF,GAAkBC,EACpB,EA+DMhE,eAAgBnG,OAAAA,EAtDK,SAACmK,GACtBrF,KAAiB+F,KAErBvB,GAAS,CAAE9E,KAAM,iBACb2B,GAAgBA,EAAegE,EACrC,EAkDMpL,QAASiB,OAAAA,EAAuB6K,GACpB,sBAEZ,CAAA3L,SAAAA,CAAAA,EAAAA,IAAAA,OAAAA,EAAAA,CACEC,UAAW,GAAGmM,ODlPxBI,iCCkP0C,eAChC9H,MACE4H,EAAAA,CAAAG,MAAO7D,GACJC,IAGJ,CAAA7I,SAAAA,EAAAA,GAAI0M,MAAMxF,IAAAA,GAAayF,KAAI,SAACC,EAAGlH,GAAAA,IAAAA,EAAU,OACxCjB,EAAAA,IAACoI,EAAAA,SAAQ,CAAA7M,UAAAA,QACN+D,EAAAA,EAAY2B,UAAAA,IAAAA,OAAAA,EAAAA,EAAQoH,OAAQpE,GAC3BjE,EAAAA,IAACX,EAAQ,CACPS,aAAcA,GACdC,SAAUA,GACVH,eAAgBA,GAChBF,eAAgBA,GAChBH,KAAMA,KAPG0B,EAWhB,OAGHjB,EAAAA,IAAAA,OAAAA,EAAAA,CACExE,UAAW,UDxQrB8M,gCCwQyC,eAC/BrI,MAAAA,GAAAA,EAAAA,CAAAA,EAAAA,EACG4C,EAAM,QAAU,QAAS,EAC1BrD,EAAAA,MAAO8H,GAAY1D,IAAmB1H,EACtCsD,EAAAA,WAAY2D,EAAa,iCAAmC,GAC5D3D,EAAKc,MAAE,UAAG6G,GAAe,KACtB3H,GAAAA,GAEL+I,MAAO/D,GAAgB,GAAGmD,OAAAA,GAAsB,2BAAkBlF,QAAAA,GAEjE,CAAAlH,SAAAA,EAAAA,GAAI0M,MAAMxF,IAAAA,GAAayF,KAAI,SAACC,EAAGlH,GAAAA,IAAAA,EAAU,OACxCjB,EAAAA,IAACoI,EAAAA,SAAQ,CAAA7M,UAAAA,QACN+D,EAAAA,EAAY2B,UAAAA,IAAAA,OAAAA,EAAAA,EAAQoH,OAAQ5E,GAC3BzD,EAAAA,IAACX,EAAQ,CACPS,aAAcA,GACdC,SAAUA,GACVH,eAAgBA,GAChBF,eAAgBA,GAChBH,KAAMA,KAPG0B,EAAAA,WAepByD,IACC1E,EAAAA,IAAAA,OAAAA,EAAAA,CACExE,UAAW,GAAGmM,ODpSxBjH,8BCoSwBiH,KAAAA,OAAe1C,IAC7BhF,MACG4H,GAAAA,EAAAA,CAAAA,EAAAA,EAAAA,EAAM,cAAgB,cAAe,GAAEpI,GACrCsF,KAAY,CAAAxJ,UAGfuJ,GAAapH,OAAS,EAAI4J,GAAYxC,IAAgB0C,KAAuB5C,SAKzF,C","sources":["components/Core-Components/LoadingButton/LoadingButton.js","components/Star/Star.js","pages/Feedback/Feedback.js","services/feedback.service.js","../node_modules/react-simple-star-rating/src/components/StarIcon.tsx","../node_modules/react-simple-star-rating/src/reducer.ts","../node_modules/react-simple-star-rating/src/components/Rating.tsx","../node_modules/react-simple-star-rating/node_modules/style-inject/dist/style-inject.es.js"],"sourcesContent":["\r\n\r\nconst LoadingButton = ({ onClick, disabled, isLoading, children, className }) => {\r\n\r\n    const handleClick = () => {\r\n        if (onClick) onClick()\r\n    }\r\n\r\n    return (\r\n        <button\r\n            className={`flex align-center justify-center ${className}`}\r\n            disabled={disabled || isLoading}\r\n            onClick={handleClick}\r\n        >\r\n            {isLoading ? (\r\n                <div className=\"spinner-border\" role=\"status\">\r\n                    <span className=\"visually-hidden\">Loading...</span>\r\n                </div>\r\n            ) : (\r\n                children\r\n            )}\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default LoadingButton","import React, { useState } from 'react'\r\nimport { Rating } from 'react-simple-star-rating'\r\nimport { ConstStyles } from '../../constants/style'\r\nimport { useEffect } from 'react'\r\n\r\nconst Feedback = ({ onRate, initialRating = 0 }) => {\r\n    const [rating, setRating] = useState(initialRating)\r\n    useEffect(() => setRating(initialRating), [initialRating])\r\n\r\n    const handleRating = (rate) => {\r\n        setRating(rate)\r\n        onRate(rate)\r\n    }\r\n\r\n    return (\r\n        <Rating\r\n            onClick={handleRating}\r\n            allowFraction={true}\r\n            fillColor={ConstStyles.PURPLE_ONE}\r\n            initialValue={rating}\r\n            readonly={initialRating ? true : false}\r\n        />\r\n    )\r\n}\r\n\r\nexport default Feedback","import { useEffect, useState } from \"react\"\r\nimport { Breadcrumb } from \"../../components\"\r\nimport LoadingButton from \"../../components/Core-Components/LoadingButton/LoadingButton\"\r\nimport { ConstTranslate } from \"../../constants/translate\"\r\nimport { useForm } from \"react-hook-form\"\r\nimport Star from \"../../components/Star/Star\"\r\nimport cogoToast from \"@hasanm95/cogo-toast\"\r\nimport { feedbackService } from \"../../services/feedback.service\"\r\nimport { useNavigate, useParams } from \"react-router-dom\"\r\nimport { ConstRoutes } from \"../../constants/routes\"\r\nimport { useSelector } from \"react-redux\"\r\n\r\n\r\nconst Feedback = () => {\r\n    const { currentUser } = useSelector(state => state.user)\r\n    const [feedback, setFeedback] = useState(null)\r\n    const [isLoading, setIsLoading] = useState()\r\n    const { register, handleSubmit, setValue } = useForm();\r\n    const { id } = useParams()\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        loadUserFeedback()\r\n    }, [])\r\n\r\n    const loadUserFeedback = async () => {\r\n        try {\r\n            const feedback = await feedbackService.query({ contactId: id, userId: currentUser._id })\r\n            if (feedback.length) setFeedback(feedback[0])\r\n        } catch (error) {\r\n            cogoToast.error(\"Something went wrong\", { position: \"top-center\" });\r\n        }\r\n    }\r\n\r\n    const onRate = (ratingValue) => {\r\n        setValue(\"rating\", ratingValue);\r\n    }\r\n\r\n    const onSubmit = async (data) => {\r\n        try {\r\n            setIsLoading(true)\r\n            await feedbackService.create({ ...data, contactId: id })\r\n            cogoToast.success(\"We got your feedback\", { position: \"top-center\" });\r\n            navigate(ConstRoutes.CONTACT_URL + id)\r\n        } catch (error) {\r\n            cogoToast.error(\"Error\", { position: \"top-center\" });\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"body-wrapper backgrounds__white-top space-pb--120\">\r\n            <Breadcrumb pageTitle={ConstTranslate.CONTACT_FEEDBACK} />\r\n\r\n            <form className=\"container\" onSubmit={handleSubmit(onSubmit)}>\r\n                <h6 className=\"text-al__center space-y--30\">How would you rate your experience with the contact?</h6>\r\n                <div className=\"flex justify-center space-mb--30\"><Star onRate={onRate} initialRating={feedback?.rating} /></div>\r\n\r\n                <div className=\"input-container\">\r\n                    <label htmlFor=\"message\" className=\"input-container__label\">Add Text</label>\r\n                    <textarea id=\"message\" className=\"input\" rows=\"4\" cols=\"50\" defaultValue={feedback?.comment} disabled={feedback ? true : false} required={true} {...register(\"comment\")}></textarea>\r\n                </div>\r\n\r\n                {!feedback && <LoadingButton className={\"button space-mt--30 __h-50\"} isLoading={isLoading}>\r\n                    {ConstTranslate.SEND}\r\n                </LoadingButton>}\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Feedback","import { FeedbackEP } from \"../config/config\"\r\nimport { httpService } from \"./http.service\"\r\n\r\n\r\nexport const feedbackService = {\r\n    query,\r\n    create,\r\n}\r\n\r\nasync function query(filterBy = {}) {\r\n    try {\r\n        const res = await httpService.get(FeedbackEP.default, filterBy)\r\n        if (res.status === 'ok') return res.content\r\n        else return new Error(res.message)\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nasync function create(feedback) {\r\n    try {\r\n        const res = await httpService.post(FeedbackEP.create, feedback)\r\n        if (res.status === 'ok') return res.content\r\n        else return new Error(res.message)\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}","import React from 'react'\r\n\r\nexport interface StarIconProps {\r\n  /** Icon width / height in `px` */\r\n  size?: number\r\n  SVGstrokeColor?: string\r\n  SVGstorkeWidth?: string | number\r\n  SVGclassName?: string\r\n  SVGstyle?: React.CSSProperties\r\n}\r\n\r\nexport function StarIcon({\r\n  size = 25,\r\n  SVGstrokeColor = 'currentColor',\r\n  SVGstorkeWidth = 0,\r\n  SVGclassName = 'star-svg',\r\n  SVGstyle\r\n}: StarIconProps) {\r\n  return (\r\n    <svg\r\n      className={SVGclassName}\r\n      style={SVGstyle}\r\n      stroke={SVGstrokeColor}\r\n      fill='currentColor'\r\n      strokeWidth={SVGstorkeWidth}\r\n      viewBox='0 0 24 24'\r\n      width={size}\r\n      height={size}\r\n      xmlns='http://www.w3.org/2000/svg'\r\n    >\r\n      <path d='M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z'></path>\r\n    </svg>\r\n  )\r\n}\r\n","type State = {\r\n  ratingValue: number | null\r\n  hoverValue: number | null\r\n  hoverIndex: number\r\n  valueIndex: number\r\n}\r\n\r\ntype Action =\r\n  | { type: 'PointerMove'; payload: number | null; index: number }\r\n  | { type: 'PointerLeave' }\r\n  | { type: 'MouseClick'; payload: number }\r\n\r\nexport function reducer(state: State, action: Action): State {\r\n  switch (action.type) {\r\n    case 'PointerMove':\r\n      return {\r\n        ...state,\r\n        hoverValue: action.payload,\r\n        hoverIndex: action.index\r\n      }\r\n\r\n    case 'PointerLeave':\r\n      return {\r\n        ...state,\r\n        ratingValue: state.ratingValue,\r\n        hoverIndex: 0,\r\n        hoverValue: null\r\n      }\r\n\r\n    case 'MouseClick':\r\n      return {\r\n        ...state,\r\n        valueIndex: state.hoverIndex,\r\n        ratingValue: action.payload\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import {\r\n  useMemo,\r\n  useReducer,\r\n  useCallback,\r\n  Fragment,\r\n  ReactNode,\r\n  CSSProperties,\r\n  MouseEvent,\r\n  PointerEvent,\r\n  useEffect\r\n} from 'react'\r\nimport { StarIcon, StarIconProps } from './StarIcon'\r\nimport { reducer } from '../reducer'\r\nimport css from '../style.module.css'\r\n\r\nexport interface RatingProps extends StarIconProps {\r\n  /** Handles the returned rating value */\r\n  onClick?: (value: number, index: number, event?: MouseEvent<HTMLSpanElement>) => void\r\n  /** onPointerMove callback function with `hover`, `index` alongside `event` values passed */\r\n  onPointerMove?: (value: number, index: number, event: PointerEvent<HTMLSpanElement>) => void\r\n  /** onPointerEnter callback function */\r\n  onPointerEnter?: (event: PointerEvent<HTMLSpanElement>) => void\r\n  /** onPointerLeave callback function */\r\n  onPointerLeave?: (event: PointerEvent<HTMLSpanElement>) => void\r\n  /** Set initial value */\r\n  initialValue?: number\r\n  /** Number of the icons */\r\n  iconsCount?: number\r\n  /** Read only mode */\r\n  readonly?: boolean\r\n  /** Add a group of icons */\r\n  customIcons?: {\r\n    icon: ReactNode\r\n  }[]\r\n  /** RTL mode */\r\n  rtl?: boolean\r\n  /** Enable a fractional rate (half icon) */\r\n  allowFraction?: boolean\r\n  /** Enable / Disable hover effect on empty icons */\r\n  allowHover?: boolean\r\n  /** Enable / Disable hover effect on filled icons */\r\n  disableFillHover?: boolean\r\n  /** Enable / Disable transition effect on mouse hover */\r\n  transition?: boolean\r\n  /** Applied to the `main` span */\r\n  className?: string\r\n  /** Inline style applied to the `main` span */\r\n  style?: CSSProperties\r\n\r\n  /** Custom fill icon SVG */\r\n  fillIcon?: ReactNode | null\r\n  /** Filled icons color */\r\n  fillColor?: string\r\n  /** Array of string to add color range */\r\n  fillColorArray?: string[]\r\n  /** Inline style applied to `filled-icons` icon span  */\r\n  fillStyle?: CSSProperties\r\n  /** Filled icons `span` className */\r\n  fillClassName?: string\r\n\r\n  /** Custom empty icon SVG */\r\n  emptyIcon?: ReactNode | null\r\n  /** Empty icons color */\r\n  emptyColor?: string\r\n  /** Inline style applied to `empty-icons` span  */\r\n  emptyStyle?: CSSProperties\r\n  /** ٌُEmpty icons `span` className */\r\n  emptyClassName?: string\r\n\r\n  /** Enable / Disable HTML`title` Tag */\r\n  allowTitleTag?: boolean\r\n  /** Show a tooltip with live values */\r\n  showTooltip?: boolean\r\n  /** Initial tooltip text if there is no rating value */\r\n  tooltipDefaultText?: string\r\n  /** Array of strings that will show inside the tooltip */\r\n  tooltipArray?: string[]\r\n  /** Inline style applied to the `tooltip` span */\r\n  tooltipStyle?: CSSProperties\r\n  /** Tooltip CSS className */\r\n  tooltipClassName?: string\r\n  /** Separator word in a title of a rating star `(1 out of 5)` */\r\n  titleSeparator?: string\r\n}\r\n\r\n/**\r\n * Check for touch devices\r\n * @returns `boolean`\r\n */\r\nfunction isTouchDevice() {\r\n  return (\r\n    (typeof window !== 'undefined' && window.matchMedia('(pointer: coarse)').matches) ||\r\n    'ontouchstart' in window ||\r\n    (typeof navigator !== 'undefined' && navigator.maxTouchPoints > 0)\r\n  )\r\n}\r\n\r\nexport function Rating({\r\n  onClick,\r\n  onPointerMove,\r\n  onPointerEnter,\r\n  onPointerLeave,\r\n  initialValue = 0,\r\n  iconsCount = 5,\r\n  size = 40,\r\n  readonly = false,\r\n  rtl = false,\r\n  customIcons = [],\r\n  allowFraction = false,\r\n  style,\r\n  className = 'react-simple-star-rating',\r\n  transition = false,\r\n\r\n  allowHover = true,\r\n  disableFillHover = false,\r\n\r\n  fillIcon = null,\r\n  fillColor = '#ffbc0b',\r\n  fillColorArray = [],\r\n  fillStyle,\r\n  fillClassName = 'filled-icons',\r\n\r\n  emptyIcon = null,\r\n  emptyColor = '#cccccc',\r\n  emptyStyle,\r\n  emptyClassName = 'empty-icons',\r\n\r\n  allowTitleTag = true,\r\n  showTooltip = false,\r\n  tooltipDefaultText = 'Your Rate',\r\n  tooltipArray = [],\r\n  tooltipStyle,\r\n  tooltipClassName = 'react-simple-star-rating-tooltip',\r\n\r\n  SVGclassName = 'star-svg',\r\n  titleSeparator = 'out of',\r\n  SVGstyle,\r\n  SVGstorkeWidth = 0,\r\n  SVGstrokeColor = 'currentColor'\r\n}: RatingProps) {\r\n  const [{ ratingValue, hoverValue, hoverIndex, valueIndex }, dispatch] = useReducer(reducer, {\r\n    hoverIndex: 0,\r\n    valueIndex: 0,\r\n    ratingValue: initialValue,\r\n    hoverValue: null\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (initialValue) dispatch({ type: 'MouseClick', payload: 0 })\r\n  }, [initialValue])\r\n\r\n  const totalIcons = useMemo(() => (allowFraction ? iconsCount * 2 : iconsCount), [allowFraction, iconsCount])\r\n\r\n  // Convert local rating value to precentage\r\n  const localRating = useMemo(() => {\r\n    if (initialValue > totalIcons) return 0\r\n\r\n    // Check for a decimal value\r\n    if (!allowFraction && Math.floor(initialValue) !== initialValue) {\r\n      return Math.ceil(initialValue) * 2 * 10\r\n    }\r\n\r\n    return Math.round((initialValue / iconsCount) * 100)\r\n  }, [allowFraction, initialValue, iconsCount, totalIcons])\r\n\r\n  const localRatingIndex = useMemo(() => (allowFraction ? initialValue * 2 - 1 : initialValue - 1) || 0, [\r\n    allowFraction,\r\n    initialValue\r\n  ])\r\n\r\n  const renderValue = useCallback(\r\n    (value: number) => (iconsCount % 2 !== 0 ? value / 2 / 10 : (value * iconsCount) / 100),\r\n    [iconsCount]\r\n  )\r\n\r\n  const handlePointerMove = (event: PointerEvent<HTMLSpanElement>) => {\r\n    const { clientX, currentTarget } = event\r\n    // Get main span element position and width\r\n    const { left, right, width } = currentTarget.children[0].getBoundingClientRect()\r\n\r\n    // Handle RTL\r\n    const positionX = rtl ? right - clientX : clientX - left\r\n\r\n    // Get current pointer position while moves over the icons\r\n    let currentValue = totalIcons\r\n    const iconWidth = Math.round(width / totalIcons)\r\n\r\n    for (let i = 0; i <= totalIcons; i = i + 1) {\r\n      if (positionX <= iconWidth * i) {\r\n        if (i === 0 && positionX < iconWidth) currentValue = 0\r\n        else currentValue = i\r\n        break\r\n      }\r\n    }\r\n\r\n    const index = currentValue - 1\r\n\r\n    if (currentValue > 0) {\r\n      // Set value and index state\r\n      dispatch({ type: 'PointerMove', payload: (currentValue * 100) / totalIcons, index })\r\n\r\n      if (onPointerMove) {\r\n        if (hoverValue) onPointerMove(renderValue(hoverValue), index, event)\r\n      }\r\n    }\r\n  }\r\n\r\n  const handlePointerEnter = (event: PointerEvent<HTMLSpanElement>) => {\r\n    if (onPointerEnter) onPointerEnter(event)\r\n    // Enable only on touch devices\r\n    if (!isTouchDevice()) return\r\n\r\n    handlePointerMove(event)\r\n  }\r\n\r\n  const handleClick = (event?: MouseEvent<HTMLSpanElement>) => {\r\n    if (hoverValue) {\r\n      dispatch({ type: 'MouseClick', payload: hoverValue })\r\n      if (onClick) onClick(renderValue(hoverValue), hoverIndex, event)\r\n    }\r\n  }\r\n\r\n  const handlePointerLeave = (event: PointerEvent<HTMLSpanElement>) => {\r\n    if (isTouchDevice()) handleClick()\r\n\r\n    dispatch({ type: 'PointerLeave' })\r\n    if (onPointerLeave) onPointerLeave(event)\r\n  }\r\n\r\n  const valuePercentage = useMemo(() => {\r\n    if (allowHover) {\r\n      if (disableFillHover) {\r\n        const currentValue = (ratingValue && ratingValue) || localRating\r\n        return hoverValue && hoverValue > currentValue ? hoverValue : currentValue\r\n      }\r\n      return (hoverValue && hoverValue) || (ratingValue && ratingValue) || localRating\r\n    }\r\n\r\n    return (ratingValue && ratingValue) || localRating\r\n  }, [allowHover, disableFillHover, hoverValue, ratingValue, localRating])\r\n\r\n  useEffect(() => {\r\n    if (tooltipArray.length > totalIcons) {\r\n      console.error('tooltipArray Array length is bigger then Icons Count length.')\r\n    }\r\n  }, [tooltipArray.length, totalIcons])\r\n\r\n  const ratingArray = useCallback(\r\n    (array: string[]) => {\r\n      return (\r\n        (hoverValue && array[hoverIndex]) ||\r\n        (ratingValue && array[valueIndex]) ||\r\n        (initialValue && array[localRatingIndex])\r\n      )\r\n    },\r\n    [hoverValue, hoverIndex, ratingValue, valueIndex, initialValue, localRatingIndex]\r\n  )\r\n\r\n  const ratingRenderValues = useMemo(() => {\r\n    return (\r\n      (hoverValue && renderValue(hoverValue)) ||\r\n      (ratingValue && renderValue(ratingValue)) ||\r\n      (initialValue && renderValue(localRating))\r\n    )\r\n  }, [hoverValue, renderValue, ratingValue, initialValue, localRating])\r\n\r\n  return (\r\n    <span className={css.starRatingWrap} style={{ direction: `${rtl ? 'rtl' : 'ltr'}` }}>\r\n      <span\r\n        className={`${css.simpleStarRating} ${className}`}\r\n        style={{\r\n          cursor: readonly ? '' : 'pointer',\r\n          ...style\r\n        }}\r\n        onPointerMove={readonly ? undefined : handlePointerMove}\r\n        onPointerEnter={readonly ? undefined : handlePointerEnter}\r\n        onPointerLeave={readonly ? undefined : handlePointerLeave}\r\n        onClick={readonly ? undefined : handleClick}\r\n        aria-hidden='true'\r\n      >\r\n        <span\r\n          className={`${css.emptyIcons} ${emptyClassName}`}\r\n          style={{\r\n            color: emptyColor,\r\n            ...emptyStyle\r\n          }}\r\n        >\r\n          {[...Array(iconsCount)].map((_, index) => (\r\n            <Fragment key={index}>\r\n              {customIcons[index]?.icon || emptyIcon || (\r\n                <StarIcon\r\n                  SVGclassName={SVGclassName}\r\n                  SVGstyle={SVGstyle}\r\n                  SVGstorkeWidth={SVGstorkeWidth}\r\n                  SVGstrokeColor={SVGstrokeColor}\r\n                  size={size}\r\n                />\r\n              )}\r\n            </Fragment>\r\n          ))}\r\n        </span>\r\n\r\n        <span\r\n          className={`${css.fillIcons} ${fillClassName}`}\r\n          style={{\r\n            [rtl ? 'right' : 'left']: 0,\r\n            color: ratingArray(fillColorArray) || fillColor,\r\n            transition: transition ? 'width .2s ease, color .2s ease' : '',\r\n            width: `${valuePercentage}%`,\r\n            ...fillStyle\r\n          }}\r\n          title={allowTitleTag ? `${ratingRenderValues} ${titleSeparator} ${iconsCount}` : undefined}\r\n        >\r\n          {[...Array(iconsCount)].map((_, index) => (\r\n            <Fragment key={index}>\r\n              {customIcons[index]?.icon || fillIcon || (\r\n                <StarIcon\r\n                  SVGclassName={SVGclassName}\r\n                  SVGstyle={SVGstyle}\r\n                  SVGstorkeWidth={SVGstorkeWidth}\r\n                  SVGstrokeColor={SVGstrokeColor}\r\n                  size={size}\r\n                />\r\n              )}\r\n            </Fragment>\r\n          ))}\r\n        </span>\r\n      </span>\r\n\r\n      {showTooltip && (\r\n        <span\r\n          className={`${css.tooltip} ${tooltipClassName}`}\r\n          style={{\r\n            [rtl ? 'marginRight' : 'marginLeft']: 20,\r\n            ...tooltipStyle\r\n          }}\r\n        >\r\n          {(tooltipArray.length > 0 ? ratingArray(tooltipArray) : ratingRenderValues) || tooltipDefaultText}\r\n        </span>\r\n      )}\r\n    </span>\r\n  )\r\n}\r\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n"],"names":["onClick","disabled","isLoading","children","className","role","onRate","initialRating","useState","rating","setRating","useEffect","rate","allowFraction","fillColor","ConstStyles","initialValue","readonly","currentUser","useSelector","state","user","feedback","setFeedback","setIsLoading","useForm","register","handleSubmit","setValue","id","useParams","navigate","useNavigate","loadUserFeedback","feedbackService","contactId","userId","_id","length","cogoToast","position","onSubmit","data","ConstRoutes","pageTitle","ConstTranslate","Star","ratingValue","htmlFor","rows","cols","defaultValue","comment","required","LoadingButton","query","create","filterBy","httpService","FeedbackEP","res","status","content","Error","message","StarIcon","_a","size","_b","_c","SVGstrokeColor","_d","SVGstorkeWidth","_e","SVGclassName","SVGstyle","_jsx","style","stroke","fill","strokeWidth","viewBox","width","height","xmlns","jsx","d","r","action","type","hoverValue","payload","hoverIndex","index","valueIndex","isTouchDevice","window","matchMedia","matches","navigator","maxTouchPoints","css","ref","insertAt","document","head","getElementsByTagName","createElement","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","onPointerMove","onPointerEnter","onPointerLeave","iconsCount","_f","_g","_h","rtl","_j","customIcons","_k","_l","_m","transition","_o","allowHover","_p","disableFillHover","_q","fillIcon","_r","_s","fillColorArray","fillStyle","_t","fillClassName","_u","emptyIcon","_v","emptyColor","emptyStyle","_w","emptyClassName","_x","allowTitleTag","_y","showTooltip","_z","tooltipDefaultText","_0","tooltipArray","tooltipStyle","_1","tooltipClassName","_2","_3","titleSeparator","_4","_5","_6","useReducer","reducer","_7","dispatch","totalIcons","useMemo","localRating","Math","floor","round","ceil","localRatingIndex","renderValue","useCallback","value","handlePointerMove","event","clientX","currentTarget","getBoundingClientRect","left","right","positionX","currentValue","iconWidth","i","handleClick","valuePercentage","console","error","ratingArray","array","ratingRenderValues","_jsxs","direction","concat","a","__assign","cursor","c","color","Array","map","_","Fragment","icon","s","title"],"sourceRoot":""}