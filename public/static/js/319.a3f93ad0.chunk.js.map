{"version":3,"file":"static/js/319.a3f93ad0.chunk.js","mappings":"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","sources":["services/credit.service.js","components/Core-Components/LoadingButton/LoadingButton.js","model/agent/Agent.js","model/contact/constContact.js","model/contact/Contact.js","model/contactTransaction/ContactTransaction.js","constants/json.js","model/user/UserInfo.js","model/creditTransaction/CreditTransaction.js","services/creditTransaction.service.js","services/payment.service.js","store/credit/credit-action.js","components/Credit/Credit.js","pages/Credits/Credits.js"],"sourcesContent":["import { CreditEP } from \"../config/config\"\r\nimport { httpService } from \"./http.service\"\r\n\r\n\r\nexport const creditService = {\r\n    query,\r\n}\r\n\r\nasync function query(filterBy = {}) {\r\n    try {\r\n        const res = await httpService.post(CreditEP.default, filterBy)\r\n        if (res.status === 'ok') return res.content\r\n        else return new Error('Cannot get credits')\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}","\r\n\r\nconst LoadingButton = ({ onClick, disabled, isLoading, children, className }) => {\r\n\r\n    const handleClick = () => {\r\n        if (onClick) onClick()\r\n    }\r\n\r\n    return (\r\n        <button\r\n            className=\"button\"\r\n            disabled={disabled || isLoading}\r\n            onClick={handleClick}\r\n        >\r\n            {isLoading ? (\r\n                <div className=\"spinner-border text-light\" role=\"status\">\r\n                    <span className=\"sr-only\"></span>\r\n                </div>\r\n            ) : (\r\n                children\r\n            )}\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default LoadingButton","import { constUser } from \"../user/constUser\"\r\n\r\n\r\n\r\nexport class Agent {\r\n    _id\r\n    fullname\r\n    imgUrl\r\n\r\n    constructor(user) {\r\n        this._id = user[constUser._ID]\r\n        this.fullname = user[constUser.FULLNAME]\r\n        this.imgUrl = user[constUser.IMG_URL]\r\n    }\r\n}","\r\nconst DESCRIPTION = 'desc'\r\nconst IMG = 'img'\r\nconst JOB_TITLE = 'jobTitle'\r\nconst PRICE = 'price'\r\nconst IN_STOCK = 'inStock'\r\nconst NAME = 'name'\r\nconst FAMILY_NAME = 'familyName'\r\nconst EMAILS = 'emails'\r\nconst MOBILE = 'mobile'\r\nconst PHONE = 'phone'\r\nconst LINKEDIN_LINKS = 'linkedinLink'\r\nconst AGENT = 'agent'\r\nconst CATEGORY = 'category'\r\nconst COUNTRY = 'country'\r\nconst COMPANY = 'company'\r\nconst ID = '_id'\r\nconst AGENTS = 'agents'\r\nconst CREATED_AT = 'createdAt'\r\nconst TRANSACTION_HISTORY = 'transactionHistory'\r\nconst EMAIL = 'email'\r\n\r\n\r\nexport const constContact = {\r\n    DESCRIPTION,\r\n    IMG,\r\n    JOB_TITLE,\r\n    PRICE,\r\n    IN_STOCK,\r\n    NAME,\r\n    FAMILY_NAME,\r\n    EMAILS,\r\n    MOBILE,\r\n    PHONE,\r\n    LINKEDIN_LINKS,\r\n    AGENT,\r\n    CATEGORY,\r\n    COUNTRY,\r\n    COMPANY,\r\n    ID,\r\n    AGENTS,\r\n    CREATED_AT,\r\n    TRANSACTION_HISTORY,\r\n    EMAIL,\r\n}","import { Agent } from \"../agent/Agent\"\r\nimport { Email } from \"../email/Email\"\r\nimport { constContact } from \"./constContact\"\r\n\r\n\r\nexport class Contact {\r\n    _id\r\n    desc\r\n    img\r\n    jobTitle\r\n    price\r\n    inStock\r\n    name\r\n    familyName\r\n    emails = []\r\n    mobile\r\n    phone\r\n    linkedinLink\r\n    agent\r\n    category\r\n    country\r\n    company\r\n    createdAt\r\n    transactionHistory\r\n\r\n    constructor(contact) {\r\n        this._id = contact[constContact.ID]\r\n        this.desc = contact[constContact.DESCRIPTION]\r\n        this.img = contact[constContact.IMG]\r\n        this.jobTitle = contact[constContact.JOB_TITLE]\r\n        this.price = contact[constContact.PRICE]\r\n        this.inStock = contact[constContact.IN_STOCK]\r\n        this.name = contact[constContact.NAME]\r\n        this.familyName = contact[constContact.FAMILY_NAME]\r\n        this.mobile = contact[constContact.MOBILE]\r\n        this.phone = contact[constContact.PHONE]\r\n        this.linkedinLink = contact[constContact.LINKEDIN_LINKS]\r\n        this.category = contact[constContact.CATEGORY]\r\n        this.country = contact[constContact.COUNTRY]\r\n        this.company = contact[constContact.COMPANY]\r\n        this.createdAt = contact[constContact.CREATED_AT]\r\n        this.transactionHistory = contact[constContact.TRANSACTION_HISTORY]\r\n        this.agent = contact[constContact.AGENT] ? new Agent(contact[constContact.AGENT]) : null\r\n        this.emails = contact[constContact.EMAILS] || []\r\n    }\r\n}","import { CREDIT_VALUE } from \"../../config/config\"\r\nimport { Contact } from '../../model/contact/Contact';\r\n\r\n\r\nexport class ContactTransaction {\r\n    contact\r\n    priceInCredit\r\n    createdAt = new Date()\r\n    userId\r\n\r\n    constructor(contact, userId) {\r\n        this.contact = new Contact(contact)\r\n        this.priceInCredit = contact.price / CREDIT_VALUE\r\n        this.userId = userId\r\n    }\r\n}","export class ConstJson {\r\n    static EMPTY_STRING = ''\r\n    static TITLE = 'title'\r\n    static CATEGORY = 'category'\r\n    static CATEGORIES = 'categories'\r\n    static JOBTITLE = 'jobTitle'\r\n    static COUNTRY = 'country'\r\n    static NAME = 'name'\r\n    static FAMILY_NAME = 'familyName'\r\n    static DESC = 'desc'\r\n    static PRICE = 'price'\r\n    static IN_STOCK = 'inStock'\r\n    static EMAIL = 'email'\r\n    static PHONE = 'phone'\r\n    static LINKEDIN_LINK = 'linkedinLink'\r\n    static COMPANY = 'company'\r\n    static _ID = '_id'\r\n    static IMG_URL = 'imgUrl'\r\n    static IMG = 'img'\r\n    static COMPANIES = 'companies'\r\n    static JOB_TITLES = 'jobTitles'\r\n    static TERRITORIES = 'territories'\r\n    static EXPENSES = 'expenses'\r\n    static INCOME = 'income'\r\n    static PERMISSIONS = 'permissions'\r\n    static AGENT = 'agent'\r\n    static USER = 'user'\r\n    static IS_APPROVED = 'isApproved'\r\n    static CREATED_AT = 'createdAt'\r\n    static UPDATED_AT = 'updatedAt'\r\n    static BUYER = 'buyer'\r\n    static CONTACT_NAME = 'contactName'\r\n    static CONTACT_COMPANY = 'contactCompany'\r\n    static CONTACT_TITLE = 'contactTitle'\r\n    static IS_ACTIVE = 'isActive'\r\n    static GENDER = 'gender'\r\n    static EMAIL_TYPE = 'emailType'\r\n    static EMAIL_URL = 'emailUrl'\r\n    static OK = 'ok'\r\n    static FULLNAME = 'fullname'\r\n    static USERNAME = 'username'\r\n    static ACTION = 'action'\r\n    static APPROVE_STATUS = 'approveStatus'\r\n}","import { constUser } from \"./constUser\"\r\n\r\n\r\nexport class UserInfo {\r\n    userId\r\n    imgUrl\r\n    fullname\r\n\r\n    constructor(user) {\r\n        this.userId = user[constUser._ID]\r\n        this.imgUrl = user[constUser.IMG_URL]\r\n        this.fullname = user[constUser.FULLNAME]\r\n    }\r\n}","import { ConstJson } from \"../../constants/json\"\r\nimport { UserInfo } from \"../user/UserInfo\"\r\n\r\n\r\nexport class CreditTransaction {\r\n    userInfo\r\n    type\r\n    creditId\r\n    creditName\r\n    creditQuantity\r\n    packagePrice\r\n    createdAt = new Date()\r\n\r\n    constructor({ credit, type, user }) {\r\n        this.userInfo = new UserInfo(user)\r\n        this.type = type\r\n        this.creditId = credit[ConstJson._ID]\r\n        this.creditName = credit.name\r\n        this.creditQuantity = credit.quantity\r\n        this.packagePrice = credit.price\r\n    }\r\n}","import { CreditTransactionEP } from \"../config/config\"\r\nimport { CreditTransaction } from \"../model/creditTransaction/CreditTransaction\"\r\nimport { httpService } from \"./http.service\"\r\nimport { userService } from \"./user.service\"\r\n\r\n\r\nexport const creditTransactionService = {\r\n    query,\r\n    createCreditTransaction,\r\n}\r\n\r\nasync function query(filterBy = {}) {\r\n    try {\r\n        const res = await httpService.get(CreditTransactionEP.default, filterBy)\r\n        if (res.status === 'ok') return res.content\r\n        else return { error: 'Cannot get credits transactions' }\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nasync function createCreditTransaction(credit) {\r\n    const content = { user: userService.getLoggedinUser(), credit, type: 'credit_purchase' }\r\n    return _createCreditTransaction(content)\r\n}\r\n\r\nfunction _createCreditTransaction({ user, credit, type }) {\r\n    return new CreditTransaction({ credit, user, type })\r\n}","import { PaymentEP } from \"../config/config\"\r\nimport { contactTransType } from \"../constants/contactTransType\"\r\nimport { ContactTransaction } from \"../model/contactTransaction/ContactTransaction\"\r\nimport { creditTransactionService } from \"./creditTransaction.service\"\r\nimport { httpService } from \"./http.service\"\r\nimport { userService } from \"./user.service\"\r\n\r\nexport const paymentService = {\r\n    query,\r\n    create,\r\n    createOne,\r\n    createContactPurchase,\r\n    removeContact,\r\n}\r\n\r\nexport async function query(filterBy = {}) {\r\n    try {\r\n        const res = await httpService.get(PaymentEP.default)\r\n        if (res.status === 'ok') return res.content\r\n        else return new Error('Cannot get territories')\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nasync function createOne(credit) {\r\n    try {\r\n        const transaction = await creditTransactionService.createCreditTransaction(credit)\r\n        const res = await httpService.post(`${PaymentEP.default}/create`, [transaction])\r\n        if (res.status === 'ok') return res.content\r\n        else throw new Error(\"Couldn't purchase credit\")\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\n\r\nasync function create(credits) {\r\n    try {\r\n        const transactions = await Promise.all(\r\n            credits.map(credit => creditTransactionService.createCreditTransaction(credit))\r\n        )\r\n        const res = await httpService.post(`${PaymentEP.default}/create`, transactions)\r\n        if (res.status === 'ok') return res.content\r\n        else throw new Error(\"Couldn't create territory\")\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nasync function createContactPurchase(contact) {\r\n    try {\r\n        const userId = userService.getLoggedinUser()._id\r\n        const transaction = _createContactTransaction(contact, userId)\r\n        const content = { transaction, userId, type: contactTransType.contactPurchase }\r\n        const res = await httpService.post(PaymentEP.contact, content)\r\n        if (res.status === 'ok') return res.content\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nasync function removeContact(transactionId, userId) {\r\n    try {\r\n        const content = { userId, transactionId, type: contactTransType.contactRemove }\r\n        const res = await httpService.post(PaymentEP.remove, content)\r\n        return res.status\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nfunction _createContactTransaction(contact, userId) {\r\n    return new ContactTransaction(contact, userId)\r\n}","import { paymentService } from \"../../services/payment.service\"\r\nimport { saveCurrentUser } from \"../user/user-slice\"\r\n\r\n\r\n\r\nexport const createTransaction = async (dispatch, credit) => {\r\n    try {\r\n        const updatedUser = await paymentService.createOne(credit)\r\n        if (updatedUser) dispatch(saveCurrentUser(updatedUser))\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}","import { useState } from \"react\"\r\nimport LoadingButton from \"../Core-Components/LoadingButton/LoadingButton\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { ConstTranslate } from \"../../constants/translate\"\r\nimport { createTransaction } from \"../../store/credit/credit-action\"\r\nimport cogoToast from '@hasanm95/cogo-toast';\r\n\r\nconst Credit = ({ credit }) => {\r\n    const [isLoading, setIsLoading] = useState()\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const onPurchaseCredit = async (credit) => {\r\n        try {\r\n            await createTransaction(dispatch, credit)\r\n            cogoToast.success(\"Credits Added\", { position: \"top-center\" });\r\n        } catch (err) {\r\n            cogoToast.error(\"Cannot purcahse credits\", { position: \"top-center\" });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div key={credit._id} className=\"credit-wrapper mt-3\">\r\n            <div className=\"credit-header\">\r\n                <p>{credit.name}</p>\r\n                <p>{credit.price} $</p>\r\n            </div>\r\n\r\n            <div className=\"credit-details_wrapper\">\r\n                <div className=\"credit-details\">\r\n                    <p>\r\n                        {ConstTranslate.CREDITS}\r\n                    </p>\r\n                    <p>\r\n                        {credit.quantity}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"credit-footer\">\r\n                <p>{credit.description}</p>\r\n                <LoadingButton\r\n                    isLoading={isLoading}\r\n                    onClick={() => onPurchaseCredit(credit)}>\r\n                    {ConstTranslate.BUY_CREDITS}\r\n                </LoadingButton>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Credit\r\n","import { useState } from \"react\"\r\nimport { useEffect } from \"react\"\r\nimport { creditService } from \"../../services/credit.service\"\r\nimport Credit from \"../../components/Credit/Credit\"\r\n\r\n\r\nconst Credits = () => {\r\n    const [credits, setCredits] = useState([])\r\n\r\n    useEffect(() => {\r\n        if (!credits.length) loadCredits()\r\n    }, [])\r\n\r\n    const loadCredits = async () => {\r\n        try {\r\n            const credits = await creditService.query()\r\n            setCredits(credits)\r\n        } catch (err) {\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"body-wrapper space-pb--120\">\r\n                {credits.map(credit => {\r\n                    return (\r\n                        <Credit key={credit._id} credit={credit} />\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Credits"],"names":["creditService","query","filterBy","httpService","CreditEP","res","status","content","Error","onClick","disabled","isLoading","children","className","role","Agent","user","this","_id","constUser","fullname","imgUrl","constContact","Contact","contact","emails","desc","img","jobTitle","price","inStock","name","familyName","mobile","phone","linkedinLink","category","country","company","createdAt","transactionHistory","agent","ContactTransaction","userId","Date","priceInCredit","CREDIT_VALUE","ConstJson","EMPTY_STRING","TITLE","CATEGORY","CATEGORIES","JOBTITLE","COUNTRY","NAME","FAMILY_NAME","DESC","PRICE","IN_STOCK","EMAIL","PHONE","LINKEDIN_LINK","COMPANY","_ID","IMG_URL","IMG","COMPANIES","JOB_TITLES","TERRITORIES","EXPENSES","INCOME","PERMISSIONS","AGENT","USER","IS_APPROVED","CREATED_AT","UPDATED_AT","BUYER","CONTACT_NAME","CONTACT_COMPANY","CONTACT_TITLE","IS_ACTIVE","GENDER","EMAIL_TYPE","EMAIL_URL","OK","FULLNAME","USERNAME","ACTION","APPROVE_STATUS","UserInfo","CreditTransaction","credit","type","userInfo","creditId","creditName","creditQuantity","quantity","packagePrice","creditTransactionService","createCreditTransaction","CreditTransactionEP","error","userService","_createCreditTransaction","paymentService","create","createOne","createContactPurchase","removeContact","PaymentEP","transaction","credits","Promise","all","map","transactions","_createContactTransaction","contactTransType","transactionId","createTransaction","dispatch","updatedUser","saveCurrentUser","useState","useDispatch","onPurchaseCredit","cogoToast","position","ConstTranslate","description","setCredits","useEffect","length","loadCredits"],"sourceRoot":""}