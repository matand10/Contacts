{"version":3,"file":"static/js/34.d90fa26d.chunk.js","mappings":"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","sources":["components/Core-Components/LoadingButton/LoadingButton.js","services/credit.service.js","store/credit/credit-action.js","components/Credit/Credit.js","pages/Credits/Credits.js","model/agent/Agent.js","model/contact/constContact.js","model/contact/Contact.js","model/contactTransaction/ContactTransaction.js","constants/json.js","model/user/UserInfo.js","model/creditTransaction/CreditTransaction.js","services/creditTransaction.service.js","services/payment.service.js"],"sourcesContent":["\r\n\r\nconst LoadingButton = ({ onClick, disabled, isLoading, children, className }) => {\r\n\r\n    const handleClick = () => {\r\n        if (onClick) onClick()\r\n    }\r\n\r\n    return (\r\n        <button\r\n            className={`flex align-center justify-center ${className}`}\r\n            disabled={disabled || isLoading}\r\n            onClick={handleClick}\r\n        >\r\n            {isLoading ? (\r\n                <div className=\"spinner-border\" role=\"status\">\r\n                    <span className=\"visually-hidden\">Loading...</span>\r\n                </div>\r\n            ) : (\r\n                children\r\n            )}\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default LoadingButton","import { CreditEP } from \"../config/config\"\r\nimport { httpService } from \"./http.service\"\r\n\r\n\r\nexport const creditService = {\r\n    query,\r\n}\r\n\r\nasync function query(filterBy = {}) {\r\n    try {\r\n        const res = await httpService.post(CreditEP.default, filterBy)\r\n        if (res.status === 'ok') return res.content\r\n        else return new Error('Cannot get credits')\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}","import { paymentService } from \"../../services/payment.service\"\r\nimport { saveCurrentUser } from \"../user/user-slice\"\r\n\r\n\r\n\r\nexport const createTransaction = async (dispatch, credit) => {\r\n    try {\r\n        const updatedUser = await paymentService.createOne(credit)\r\n        if (updatedUser) dispatch(saveCurrentUser(updatedUser))\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}","import { useState } from \"react\"\r\nimport LoadingButton from \"../Core-Components/LoadingButton/LoadingButton\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { ConstTranslate } from \"../../constants/translate\"\r\nimport { createTransaction } from \"../../store/credit/credit-action\"\r\nimport cogoToast from '@hasanm95/cogo-toast';\r\n\r\nconst Credit = ({ credit }) => {\r\n    const [isLoading, setIsLoading] = useState()\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const onPurchaseCredit = async (credit) => {\r\n        try {\r\n            await createTransaction(dispatch, credit)\r\n            cogoToast.success(\"Credits Added\", { position: \"top-center\" });\r\n        } catch (err) {\r\n            cogoToast.error(\"Cannot purcahse credits\", { position: \"top-center\" });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div key={credit._id} className=\"credit-wrapper mt-3\">\r\n            <div className=\"credit-header\">\r\n                <p>{credit.name}</p>\r\n                <p>{credit.price} $</p>\r\n            </div>\r\n\r\n            <div className=\"credit-details_wrapper\">\r\n                <div className=\"credit-details\">\r\n                    <p>\r\n                        {ConstTranslate.CREDITS}\r\n                    </p>\r\n                    <p>\r\n                        {credit.quantity}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"credit-footer\">\r\n                <p>{credit.description}</p>\r\n                <LoadingButton className={\"button\"} isLoading={isLoading} onClick={() => onPurchaseCredit(credit)}>\r\n                    {ConstTranslate.BUY_CREDITS}\r\n                </LoadingButton>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Credit\r\n","import { useEffect, useState } from \"react\"\r\nimport { creditService } from \"../../services/credit.service\"\r\nimport Credit from \"../../components/Credit/Credit\"\r\n\r\n\r\nconst Credits = () => {\r\n    const [credits, setCredits] = useState([])\r\n\r\n    useEffect(() => {\r\n        if (!credits.length) loadCredits()\r\n    }, [])\r\n\r\n    const loadCredits = async () => {\r\n        try {\r\n            const credits = await creditService.query()\r\n            setCredits(credits)\r\n        } catch (err) {\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"body-wrapper space-pb--120\">\r\n                {credits.map(credit => {\r\n                    return (\r\n                        <Credit key={credit._id} credit={credit} />\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Credits","import { constUser } from \"../user/constUser\"\r\n\r\n\r\n\r\nexport class Agent {\r\n    _id\r\n    fullname\r\n    imgUrl\r\n\r\n    constructor(user) {\r\n        this._id = user[constUser._ID]\r\n        this.fullname = user[constUser.FULLNAME]\r\n        this.imgUrl = user[constUser.IMG_URL]\r\n    }\r\n}","\r\nconst DESCRIPTION = 'desc'\r\nconst IMG = 'img'\r\nconst JOB_TITLE = 'jobTitle'\r\nconst PRICE = 'price'\r\nconst IN_STOCK = 'inStock'\r\nconst NAME = 'name'\r\nconst FAMILY_NAME = 'familyName'\r\nconst EMAILS = 'emails'\r\nconst MOBILE = 'mobile'\r\nconst PHONE = 'phone'\r\nconst LINKEDIN_LINKS = 'linkedinLink'\r\nconst AGENT = 'agent'\r\nconst CATEGORY = 'category'\r\nconst COUNTRY = 'country'\r\nconst COMPANY = 'company'\r\nconst ID = '_id'\r\nconst AGENTS = 'agents'\r\nconst CREATED_AT = 'createdAt'\r\nconst TRANSACTION_HISTORY = 'transactionHistory'\r\nconst EMAIL = 'email'\r\n\r\n\r\nexport const constContact = {\r\n    DESCRIPTION,\r\n    IMG,\r\n    JOB_TITLE,\r\n    PRICE,\r\n    IN_STOCK,\r\n    NAME,\r\n    FAMILY_NAME,\r\n    EMAILS,\r\n    MOBILE,\r\n    PHONE,\r\n    LINKEDIN_LINKS,\r\n    AGENT,\r\n    CATEGORY,\r\n    COUNTRY,\r\n    COMPANY,\r\n    ID,\r\n    AGENTS,\r\n    CREATED_AT,\r\n    TRANSACTION_HISTORY,\r\n    EMAIL,\r\n}","import { Agent } from \"../agent/Agent\"\r\nimport { Email } from \"../email/Email\"\r\nimport { constContact } from \"./constContact\"\r\n\r\n\r\nexport class Contact {\r\n    _id\r\n    desc\r\n    img\r\n    jobTitle\r\n    price\r\n    inStock\r\n    name\r\n    familyName\r\n    emails = []\r\n    mobile\r\n    phone\r\n    linkedinLink\r\n    agent\r\n    category\r\n    country\r\n    company\r\n    createdAt\r\n    transactionHistory\r\n\r\n    constructor(contact) {\r\n        this._id = contact[constContact.ID]\r\n        this.desc = contact[constContact.DESCRIPTION]\r\n        this.img = contact[constContact.IMG]\r\n        this.jobTitle = contact[constContact.JOB_TITLE]\r\n        this.price = contact[constContact.PRICE]\r\n        this.inStock = contact[constContact.IN_STOCK]\r\n        this.name = contact[constContact.NAME]\r\n        this.familyName = contact[constContact.FAMILY_NAME]\r\n        this.mobile = contact[constContact.MOBILE]\r\n        this.phone = contact[constContact.PHONE]\r\n        this.linkedinLink = contact[constContact.LINKEDIN_LINKS]\r\n        this.category = contact[constContact.CATEGORY]\r\n        this.country = contact[constContact.COUNTRY]\r\n        this.company = contact[constContact.COMPANY]\r\n        this.createdAt = contact[constContact.CREATED_AT]\r\n        this.transactionHistory = contact[constContact.TRANSACTION_HISTORY]\r\n        this.agent = contact[constContact.AGENT] ? new Agent(contact[constContact.AGENT]) : null\r\n        this.emails = contact[constContact.EMAILS] || []\r\n    }\r\n}","import { CREDIT_VALUE } from \"../../config/config\"\r\nimport { Contact } from '../../model/contact/Contact';\r\n\r\n\r\nexport class ContactTransaction {\r\n    contact\r\n    priceInCredit\r\n    createdAt = new Date()\r\n    userId\r\n\r\n    constructor(contact, userId) {\r\n        this.contact = new Contact(contact)\r\n        this.priceInCredit = contact.price / CREDIT_VALUE\r\n        this.userId = userId\r\n    }\r\n}","export class ConstJson {\r\n    static EMPTY_STRING = ''\r\n    static TITLE = 'title'\r\n    static CATEGORY = 'category'\r\n    static CATEGORIES = 'categories'\r\n    static JOBTITLE = 'jobTitle'\r\n    static COUNTRY = 'country'\r\n    static NAME = 'name'\r\n    static FAMILY_NAME = 'familyName'\r\n    static DESC = 'desc'\r\n    static PRICE = 'price'\r\n    static IN_STOCK = 'inStock'\r\n    static EMAIL = 'email'\r\n    static PHONE = 'phone'\r\n    static LINKEDIN_LINK = 'linkedinLink'\r\n    static COMPANY = 'company'\r\n    static _ID = '_id'\r\n    static IMG_URL = 'imgUrl'\r\n    static IMG = 'img'\r\n    static COMPANIES = 'companies'\r\n    static JOB_TITLES = 'jobTitles'\r\n    static TERRITORIES = 'territories'\r\n    static EXPENSES = 'expenses'\r\n    static INCOME = 'income'\r\n    static PERMISSIONS = 'permissions'\r\n    static AGENT = 'agent'\r\n    static USER = 'user'\r\n    static IS_APPROVED = 'isApproved'\r\n    static CREATED_AT = 'createdAt'\r\n    static UPDATED_AT = 'updatedAt'\r\n    static BUYER = 'buyer'\r\n    static CONTACT_NAME = 'contactName'\r\n    static CONTACT_COMPANY = 'contactCompany'\r\n    static CONTACT_TITLE = 'contactTitle'\r\n    static IS_ACTIVE = 'isActive'\r\n    static GENDER = 'gender'\r\n    static EMAIL_TYPE = 'emailType'\r\n    static EMAIL_URL = 'emailUrl'\r\n    static OK = 'ok'\r\n    static FULLNAME = 'fullname'\r\n    static USERNAME = 'username'\r\n    static ACTION = 'action'\r\n    static APPROVE_STATUS = 'approveStatus'\r\n}","import { constUser } from \"./constUser\"\r\n\r\n\r\nexport class UserInfo {\r\n    userId\r\n    imgUrl\r\n    fullname\r\n\r\n    constructor(user) {\r\n        this.userId = user[constUser._ID]\r\n        this.imgUrl = user[constUser.IMG_URL]\r\n        this.fullname = user[constUser.FULLNAME]\r\n    }\r\n}","import { ConstJson } from \"../../constants/json\"\r\nimport { UserInfo } from \"../user/UserInfo\"\r\n\r\n\r\nexport class CreditTransaction {\r\n    userInfo\r\n    type\r\n    creditId\r\n    creditName\r\n    creditQuantity\r\n    packagePrice\r\n    createdAt = new Date()\r\n\r\n    constructor({ credit, type, user }) {\r\n        this.userInfo = new UserInfo(user)\r\n        this.type = type\r\n        this.creditId = credit[ConstJson._ID]\r\n        this.creditName = credit.name\r\n        this.creditQuantity = credit.quantity\r\n        this.packagePrice = credit.price\r\n    }\r\n}","import { CreditTransactionEP } from \"../config/config\"\r\nimport { CreditTransaction } from \"../model/creditTransaction/CreditTransaction\"\r\nimport { httpService } from \"./http.service\"\r\nimport { userService } from \"./user.service\"\r\n\r\n\r\nexport const creditTransactionService = {\r\n    query,\r\n    createCreditTransaction,\r\n}\r\n\r\nasync function query(filterBy = {}) {\r\n    try {\r\n        const res = await httpService.get(CreditTransactionEP.default, filterBy)\r\n        if (res.status === 'ok') return res.content\r\n        else return { error: 'Cannot get credits transactions' }\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nasync function createCreditTransaction(credit) {\r\n    const content = { user: userService.getLoggedinUser(), credit, type: 'credit_purchase' }\r\n    return _createCreditTransaction(content)\r\n}\r\n\r\nfunction _createCreditTransaction({ user, credit, type }) {\r\n    return new CreditTransaction({ credit, user, type })\r\n}","import { PaymentEP } from \"../config/config\"\r\nimport { contactTransType } from \"../constants/contactTransType\"\r\nimport { ContactTransaction } from \"../model/contactTransaction/ContactTransaction\"\r\nimport { creditTransactionService } from \"./creditTransaction.service\"\r\nimport { httpService } from \"./http.service\"\r\nimport { userService } from \"./user.service\"\r\n\r\nexport const paymentService = {\r\n    query,\r\n    create,\r\n    createOne,\r\n    createContactsPurchase,\r\n    removeContact,\r\n}\r\n\r\nexport async function query(filterBy = {}) {\r\n    try {\r\n        const res = await httpService.get(PaymentEP.default)\r\n        if (res.status === 'ok') return res.content\r\n        else return new Error('Cannot get territories')\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nasync function createOne(credit) {\r\n    try {\r\n        const transaction = await creditTransactionService.createCreditTransaction(credit)\r\n        const res = await httpService.post(`${PaymentEP.default}/create`, [transaction])\r\n        if (res.status === 'ok') return res.content\r\n        else throw new Error(\"Couldn't purchase credit\")\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nasync function create(credits) {\r\n    try {\r\n        const transactions = await Promise.all(\r\n            credits.map(credit => creditTransactionService.createCreditTransaction(credit))\r\n        )\r\n        const res = await httpService.post(`${PaymentEP.default}/create`, transactions)\r\n        if (res.status === 'ok') return res.content\r\n        else throw new Error(\"Couldn't create territory\")\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nasync function createContactsPurchase(contacts) {\r\n    try {\r\n        const userId = userService.getLoggedinUser()._id\r\n        const transactions = _createContactTransactions(contacts, userId)\r\n        const content = { transactions, userId, type: contactTransType.contactPurchase }\r\n        const res = await httpService.post(PaymentEP.contact, content)\r\n        if (res.status === 'ok') return res.content\r\n        else throw new Error('Cannot purchase')\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nasync function removeContact(transactionId, userId) {\r\n    try {\r\n        const content = { userId, transactionId, type: contactTransType.contactRemove }\r\n        const res = await httpService.post(PaymentEP.remove, content)\r\n        if (res.status === 'ok') return res.content\r\n        else throw new Error('Cannot refund')\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nfunction _createContactTransactions(contacts, userId) {\r\n    return contacts.map(contact => {\r\n        return _createContactTransaction(contact, userId)\r\n    })\r\n}\r\n\r\nfunction _createContactTransaction(contact, userId) {\r\n    return new ContactTransaction(contact, userId)\r\n}"],"names":["onClick","disabled","isLoading","children","className","role","creditService","query","filterBy","httpService","CreditEP","res","status","content","Error","createTransaction","dispatch","credit","paymentService","updatedUser","saveCurrentUser","useState","useDispatch","onPurchaseCredit","cogoToast","position","name","price","ConstTranslate","quantity","description","LoadingButton","_id","credits","setCredits","useEffect","length","loadCredits","map","Agent","user","this","constUser","fullname","imgUrl","constContact","Contact","contact","emails","desc","img","jobTitle","inStock","familyName","mobile","phone","linkedinLink","category","country","company","createdAt","transactionHistory","agent","ContactTransaction","userId","Date","priceInCredit","CREDIT_VALUE","ConstJson","EMPTY_STRING","TITLE","CATEGORY","CATEGORIES","JOBTITLE","COUNTRY","NAME","FAMILY_NAME","DESC","PRICE","IN_STOCK","EMAIL","PHONE","LINKEDIN_LINK","COMPANY","_ID","IMG_URL","IMG","COMPANIES","JOB_TITLES","TERRITORIES","EXPENSES","INCOME","PERMISSIONS","AGENT","USER","IS_APPROVED","CREATED_AT","UPDATED_AT","BUYER","CONTACT_NAME","CONTACT_COMPANY","CONTACT_TITLE","IS_ACTIVE","GENDER","EMAIL_TYPE","EMAIL_URL","OK","FULLNAME","USERNAME","ACTION","APPROVE_STATUS","UserInfo","CreditTransaction","type","userInfo","creditId","creditName","creditQuantity","packagePrice","creditTransactionService","createCreditTransaction","CreditTransactionEP","error","userService","_createCreditTransaction","create","createOne","createContactsPurchase","removeContact","PaymentEP","transaction","Promise","all","transactions","contacts","_createContactTransactions","contactTransType","transactionId","_createContactTransaction"],"sourceRoot":""}