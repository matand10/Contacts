{"version":3,"file":"static/js/825.0e6c255a.chunk.js","mappings":"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","sources":["pages/ContactDetails/ContactDetails.js","services/contact.service.js","store/cart/cart-action.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { contactService } from \"../../services/contact.service\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { DUMMY_USER_URL } from \"../../config/config\";\r\nimport { ReactSVG } from \"react-svg\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addFavorite, deleteFavorite } from \"../../store/user/user-action\";\r\nimport { Preloader } from \"../../components\";\r\nimport { contactTransType } from \"../../constants/contactTransType\";\r\nimport { addContactToCartAction } from \"../../store/cart/cart-action\";\r\n\r\n\r\nconst ContactDetails = () => {\r\n    const { currentUser } = useSelector(state => state.user)\r\n    const { contactCart } = useSelector((state) => state.cart);\r\n\r\n    const [contact, setContact] = useState(null)\r\n    const [isFavorite, setIsFavorite] = useState(false)\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [isOwned, setIsOwned] = useState(false)\r\n    const [isContactInCart, setIsContactInCart] = useState(false)\r\n\r\n    const { id } = useParams()\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        loadContact()\r\n        checkIsOwnedByUser()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        checkIsContactInCart()\r\n    }, [contactCart])\r\n\r\n    const checkIsContactInCart = () => {\r\n        if (contactCart.length && contact) {\r\n            const res = contactCart.find(currContact => currContact._id === contact._id)\r\n            setIsContactInCart(res ? true : false)\r\n        }\r\n    }\r\n\r\n    const checkIsOwnedByUser = () => {\r\n        if (currentUser) {\r\n            const isOwned = currentUser.contactTransactions.find(trans => (trans.type === contactTransType.contactPurchase) && (trans.contact._id === id)) ? true : false\r\n            setIsOwned(isOwned)\r\n        } else setIsOwned(false)\r\n    }\r\n\r\n    const loadContact = async () => {\r\n        try {\r\n            const contact = await contactService.getById(id)\r\n            loadFavorite(contact)\r\n            setContact(contact)\r\n        } catch (err) {\r\n            console.log(err)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    const loadFavorite = (contact) => {\r\n        if (currentUser) {\r\n            const isFavorite = currentUser.favorites.find(favorite => favorite._id === contact._id)\r\n            if (isFavorite) setIsFavorite(true)\r\n            else setIsFavorite(false)\r\n        }\r\n    }\r\n\r\n    const onFavorite = (item) => {\r\n        if (isFavorite) {\r\n            deleteFavorite(dispatch, item, currentUser)\r\n            setIsFavorite(false)\r\n        }\r\n        else {\r\n            addFavorite(dispatch, item, currentUser)\r\n            setIsFavorite(true)\r\n        }\r\n    }\r\n\r\n    const isUserOwnContact = () => {\r\n        if (!contact || !currentUser) return false\r\n        const res = currentUser.contactTransactions.find(trans => trans.contact._id === contact._id)\r\n        return res ? true : false\r\n    }\r\n\r\n    // const isUserHasCredits = () => {\r\n    //     if (currentUser.credits >= utilService.getContactValueInCredit(contact.price)) return true\r\n    //     else return false\r\n    // }\r\n\r\n    const onAddToCart = async () => {\r\n        // if (isUserOwnContact()) {\r\n        //     return cogoToast.info(\"You own this contact already\", { position: \"center-top\" });\r\n        // }\r\n\r\n        // if (!utilService.isUserHasCredits([contact])) {\r\n        //     return cogoToast.info(\"Not enough credits\", { position: \"center-top\" });\r\n        // }\r\n\r\n        addContactToCartAction(dispatch, contact)\r\n    }\r\n\r\n    const onDownload = () => {\r\n\r\n    }\r\n\r\n    if (isLoading || !contact) return <Preloader />;\r\n    return (\r\n        <div className=\"body-wrapper space-pb--120\">\r\n            {/*====================  contact image ====================*/}\r\n            <div className=\"product-image-slider-wrapper space-pb--30 space-mb--30\">\r\n                <div className=\"product-image-single swiper-slide\">\r\n                    <img\r\n                        src={contact?.img?.url || DUMMY_USER_URL}\r\n                        className=\"img-fluid\"\r\n                        alt=\"\"\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {/*====================  contact content ====================*/}\r\n            <div className=\"product-content-header-area border-bottom--thick space-pb--30\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <div className=\"product-content-header\">\r\n                                <div className=\"product-content-header__main-info\">\r\n                                    {isOwned && <h3 className=\"title\">Name: <span className=\"info\">{contact.name} {contact.familyName}</span></h3>}\r\n                                    <h3 className=\"title\">Category: <span className=\"info\">{contact.category}</span></h3>\r\n                                    <h3 className=\"title\">Company: <span className=\"info\">{contact.company}</span></h3>\r\n                                    <h3 className=\"title\">Job Title: <span className=\"info\">{contact.jobTitle}</span></h3>\r\n                                    <div className=\"price\">\r\n                                        <span className=\"discounted-price\">{`$${contact.price}`}</span>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"product-content-header__wishlist-info text-center\">\r\n                                    <ReactSVG\r\n                                        src={\r\n                                            process.env.PUBLIC_URL +\r\n                                            \"/assets/img/icons/heart-dark.svg\"\r\n                                        }\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* product content description */}\r\n            <div className=\"product-content-description border-bottom--thick space-pt--25 space-pb--25\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <p className=\"space-mb--25\">Description: {contact.desc}</p>\r\n                            <h4 className=\"space-mb--5\">Information</h4>\r\n                            <p>\r\n                                To Bangladesh from seller via china. Shipping <br /> method\r\n                                online.\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {/* product content safety */}\r\n            <div className=\"product-content-safety border-bottom--thick space-pt--15 space-pb--15\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <h4>\r\n                                <ReactSVG\r\n                                    src={\r\n                                        process.env.PUBLIC_URL + \"/assets/img/icons/security.svg\"\r\n                                    }\r\n                                />{\" \"}\r\n                                Secure Payment Method.\r\n                            </h4>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* shop product button */}\r\n            <div className=\"shop-product-button\">\r\n                <button className=\"wishlist\" disabled={!isFavorite} onClick={isOwned ? () => { } : onFavorite}>\r\n                    {isOwned || isFavorite ? \"Feedback\" : \"Add to favorites\"}\r\n                </button>\r\n                <button className=\"cart\" onClick={isOwned ? onDownload : onAddToCart}>\r\n                    {isOwned ? \"Download\" : isContactInCart ? \"Already in cart\" : \"Add to cart\"}\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ContactDetails","import { ContactsEP } from \"../config/config\"\r\nimport { httpService } from \"./http.service\"\r\n\r\nexport const contactService = {\r\n    query,\r\n    getById,\r\n    getUserContactSales,\r\n    queryByCategory,\r\n    getLastCreatedContacts,\r\n}\r\n\r\n\r\nasync function query(filterBy = {}) {\r\n    try {\r\n        const res = await httpService.post(ContactsEP.get, filterBy)\r\n        if (res.status === 'ok') return res.content\r\n        else return new Error('Cannot get contacts')\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nasync function getById(id) {\r\n    try {\r\n        const res = await httpService.get(`${ContactsEP.getById}/${id}`)\r\n        if (res.status !== 'ok') throw new Error('Cannot find contact')\r\n        else return res.content\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nasync function getUserContactSales(userId) {\r\n    try {\r\n        const res = await httpService.post(`${ContactsEP.getByUser}`, { userId })\r\n        if (res.status === 'ok') return res.content\r\n        else return new Error('Cannot get contacts sales')\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nasync function queryByCategory(cat) {\r\n    try {\r\n        const res = await httpService.get(`${ContactsEP.get}/${cat}`)\r\n        return res\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nasync function getLastCreatedContacts() {\r\n    try {\r\n        const res = await httpService.get(`${ContactsEP.new}/10?DESC`)\r\n        return res\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}","import { addCreditToCart, addToContactCart, deleteAllFromCart, deleteFromCart } from \"./cart-slice\"\r\n\r\n\r\nexport const addCreditToCartAction = (dispatch, credit) => {\r\n    dispatch(addCreditToCart(credit))\r\n}\r\n\r\nexport const addContactToCartAction = (dispatch, contact) => {\r\n    dispatch(addToContactCart(contact))\r\n}\r\n\r\nexport const removeContactToCartAction = (dispatch, contactId) => {\r\n    dispatch(deleteFromCart(contactId))\r\n}\r\n\r\nexport const deleteAllFromCartAction = (dispatch) => {\r\n    dispatch(deleteAllFromCart())\r\n}"],"names":["currentUser","useSelector","state","user","contactCart","cart","useState","contact","setContact","isFavorite","setIsFavorite","isLoading","setIsLoading","isOwned","setIsOwned","isContactInCart","setIsContactInCart","id","useParams","dispatch","useDispatch","useEffect","loadContact","checkIsOwnedByUser","checkIsContactInCart","length","res","find","currContact","_id","contactTransactions","trans","type","contactTransType","contactService","loadFavorite","console","log","favorites","favorite","onAddToCart","addContactToCartAction","className","src","img","url","DUMMY_USER_URL","alt","name","familyName","category","company","jobTitle","price","desc","disabled","onClick","item","deleteFavorite","addFavorite","query","getById","getUserContactSales","queryByCategory","getLastCreatedContacts","filterBy","httpService","ContactsEP","status","content","Error","userId","cat","addToContactCart","removeContactToCartAction","contactId","deleteFromCart","deleteAllFromCartAction","deleteAllFromCart"],"sourceRoot":""}