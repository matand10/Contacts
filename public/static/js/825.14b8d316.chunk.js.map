{"version":3,"file":"static/js/825.14b8d316.chunk.js","mappings":"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","sources":["pages/ContactDetails/ContactDetails.js","services/contact.service.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { contactService } from \"../../services/contact.service\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { DUMMY_USER_URL } from \"../../config/config\";\r\nimport { ReactSVG } from \"react-svg\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addFavorite, deleteFavorite } from \"../../store/user/user-action\";\r\nimport { utilService } from \"../../services/util.service\";\r\nimport { Preloader } from \"../../components\";\r\nimport { contactTransType } from \"../../constants/contactTransType\";\r\n\r\n\r\nconst ContactDetails = () => {\r\n    const { currentUser } = useSelector(state => state.user)\r\n\r\n    const [contact, setContact] = useState(null)\r\n    const [isFavorite, setIsFavorite] = useState(false)\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [isOwned, setIsOwned] = useState(false)\r\n\r\n    const { id } = useParams()\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        loadContact()\r\n        checkIsOwnedByUser()\r\n    }, [])\r\n\r\n    const checkIsOwnedByUser = () => {\r\n        if (currentUser) {\r\n            const isOwned = currentUser.contactTransactions.find(trans => (trans.type === contactTransType.contactPurchase) && (trans.contact._id === id)) ? true : false\r\n            setIsOwned(isOwned)\r\n        } else setIsOwned(false)\r\n    }\r\n\r\n    const loadContact = async () => {\r\n        try {\r\n            const contact = await contactService.getById(id)\r\n            loadFavorite(contact)\r\n            setContact(contact)\r\n        } catch (err) {\r\n            console.log(err)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    const loadFavorite = (contact) => {\r\n        if (currentUser) {\r\n            const isFavorite = currentUser.favorites.find(favorite => favorite._id === contact._id)\r\n            if (isFavorite) setIsFavorite(true)\r\n            else setIsFavorite(false)\r\n        }\r\n    }\r\n\r\n    const onFavorite = (item) => {\r\n        if (isFavorite) {\r\n            deleteFavorite(dispatch, item, currentUser)\r\n            setIsFavorite(false)\r\n        }\r\n        else {\r\n            addFavorite(dispatch, item, currentUser)\r\n            setIsFavorite(true)\r\n        }\r\n    }\r\n\r\n    const isUserOwnContact = () => {\r\n        if (!contact || !currentUser) return false\r\n        const res = currentUser.contactTransactions.find(trans => trans.contact._id === contact._id)\r\n        return res ? true : false\r\n    }\r\n\r\n    const isUserHasCredits = () => {\r\n        if (currentUser.credits >= utilService.getContactValueInCredit(contact.price)) return true\r\n        else return false\r\n    }\r\n\r\n    const onAddToCart = async () => {\r\n        if (isUserOwnContact()) {\r\n            return console.log('You own this contact already')\r\n        }\r\n\r\n        if (!isUserHasCredits()) {\r\n            return console.log('Not enough credits')\r\n        }\r\n\r\n        try {\r\n            return console.log('Contact added')\r\n        } catch (err) {\r\n            return console.log('Cannot add contact')\r\n        }\r\n    }\r\n\r\n    if (isLoading || !contact) return <Preloader />;\r\n    return (\r\n        <div className=\"body-wrapper space-pb--120\">\r\n            {/*====================  contact image ====================*/}\r\n            <div className=\"product-image-slider-wrapper space-pb--30 space-mb--30\">\r\n                <div className=\"product-image-single swiper-slide\">\r\n                    <img\r\n                        src={contact?.img?.url || DUMMY_USER_URL}\r\n                        className=\"img-fluid\"\r\n                        alt=\"\"\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {/*====================  contact content ====================*/}\r\n            <div className=\"product-content-header-area border-bottom--thick space-pb--30\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <div className=\"product-content-header\">\r\n                                <div className=\"product-content-header__main-info\">\r\n                                    {isOwned && <h3 className=\"title\">Name: <span className=\"info\">{contact.name} {contact.familyName}</span></h3>}\r\n                                    <h3 className=\"title\">Category: <span className=\"info\">{contact.category}</span></h3>\r\n                                    <h3 className=\"title\">Company: <span className=\"info\">{contact.company}</span></h3>\r\n                                    <h3 className=\"title\">Job Title: <span className=\"info\">{contact.jobTitle}</span></h3>\r\n                                    <div className=\"price\">\r\n                                        <span className=\"discounted-price\">{`$${contact.price}`}</span>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"product-content-header__wishlist-info text-center\">\r\n                                    <ReactSVG\r\n                                        src={\r\n                                            process.env.PUBLIC_URL +\r\n                                            \"/assets/img/icons/heart-dark.svg\"\r\n                                        }\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* product content description */}\r\n            <div className=\"product-content-description border-bottom--thick space-pt--25 space-pb--25\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <p className=\"space-mb--25\">Description: {contact.desc}</p>\r\n                            <h4 className=\"space-mb--5\">Information</h4>\r\n                            <p>\r\n                                To Bangladesh from seller via china. Shipping <br /> method\r\n                                online.\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {/* product content safety */}\r\n            <div className=\"product-content-safety border-bottom--thick space-pt--15 space-pb--15\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <h4>\r\n                                <ReactSVG\r\n                                    src={\r\n                                        process.env.PUBLIC_URL + \"/assets/img/icons/security.svg\"\r\n                                    }\r\n                                />{\" \"}\r\n                                Secure Payment Method.\r\n                            </h4>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* shop product button */}\r\n            <div className=\"shop-product-button\">\r\n                <button className=\"wishlist\" disabled={!isFavorite} onClick={isOwned ? () => { } : onFavorite}>\r\n                    {isOwned || isFavorite ? \"Feedback\" : \"Add to favorites\"}\r\n                </button>\r\n                <button className=\"cart\">\r\n                    {isOwned ? \"Download\" : \"Add to cart\"}\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ContactDetails","import { ContactsEP } from \"../config/config\"\r\nimport { httpService } from \"./http.service\"\r\n\r\nexport const contactService = {\r\n    query,\r\n    getById,\r\n    getUserContactSales,\r\n    queryByCategory,\r\n    getLastCreatedContacts,\r\n}\r\n\r\n\r\nasync function query(filterBy = {}) {\r\n    try {\r\n        const res = await httpService.post(ContactsEP.get, filterBy)\r\n        if (res.status === 'ok') return res.content\r\n        else return new Error('Cannot get contacts')\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nasync function getById(id) {\r\n    try {\r\n        const res = await httpService.get(`${ContactsEP.getById}/${id}`)\r\n        if (res.status !== 'ok') throw new Error('Cannot find contact')\r\n        else return res.content\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nasync function getUserContactSales(userId) {\r\n    try {\r\n        const res = await httpService.post(`${ContactsEP.getByUser}`, { userId })\r\n        if (res.status === 'ok') return res.content\r\n        else return new Error('Cannot get contacts sales')\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nasync function queryByCategory(cat) {\r\n    try {\r\n        const res = await httpService.get(`${ContactsEP.get}/${cat}`)\r\n        return res\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nasync function getLastCreatedContacts() {\r\n    try {\r\n        const res = await httpService.get(`${ContactsEP.new}/10?DESC`)\r\n        return res\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}"],"names":["currentUser","useSelector","state","user","useState","contact","setContact","isFavorite","setIsFavorite","isLoading","setIsLoading","isOwned","setIsOwned","id","useParams","dispatch","useDispatch","useEffect","loadContact","checkIsOwnedByUser","contactTransactions","find","trans","type","contactTransType","_id","contactService","loadFavorite","console","log","favorites","favorite","className","src","img","url","DUMMY_USER_URL","alt","name","familyName","category","company","jobTitle","price","desc","disabled","onClick","item","deleteFavorite","addFavorite","query","getById","getUserContactSales","queryByCategory","getLastCreatedContacts","filterBy","httpService","ContactsEP","res","status","content","Error","userId","cat"],"sourceRoot":""}