{"version":3,"file":"static/js/235.a332f766.chunk.js","mappings":"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","sources":["constants/messages.js","services/supportChat.service.js","hooks/useScrollDown.hook.js","hooks/useUpdateEffect.hook.js","pages/Chat/Chat.js"],"sourcesContent":["export const ConstMessages = {\r\n    SOMETHING_WENT_WRONG: 'Something went wrong',\r\n    PLEASE_FILL_OUT_ALL_THE_FIELDS: 'Please fill out all the fields',\r\n    MESSAGE_SENT: 'Message sent',\r\n    CANNOT_SEND_MESSAGE: 'Cannot send message',\r\n}\r\n\r\nexport const ConstPosition = {\r\n    TOP_CENTER: 'top-center'\r\n}","import { SupportChatEP } from \"../config/config\"\r\nimport { httpService } from \"./http.service\"\r\n\r\n\r\n\r\nexport const supportChatService = {\r\n    query,\r\n    send,\r\n}\r\n\r\nexport async function query(filterBy = { chatId: '' }) {\r\n    try {\r\n        const res = await httpService.get(SupportChatEP.default, { params: filterBy.chatId })\r\n        if (res.status === 'ok') return res.content\r\n        else return new Error('Cannot get messages')\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}\r\n\r\nexport async function send(data) {\r\n    try {\r\n        const res = await httpService.post(SupportChatEP.create, data)\r\n        if (res.status === 'ok') return res.content\r\n        else return new Error('Cannot send message')\r\n    } catch (err) {\r\n        throw err\r\n    }\r\n}","import { useEffect } from 'react';\r\n\r\nconst useScrollToBottom = (options = { behavior: 'smooth' }) => {\r\n    const handleScrollToBottom = () => {\r\n        window.scrollTo({\r\n            top: document.body.scrollHeight, // Scroll to the bottom of the page\r\n            ...options,\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        // You can trigger the scroll to bottom on mount, or based on some other condition\r\n        handleScrollToBottom();\r\n    }, []); // The empty dependency array ensures that the effect runs only once\r\n\r\n    return handleScrollToBottom;\r\n};\r\n\r\nexport default useScrollToBottom;\r\n","import { useEffect } from \"react\"\r\nimport { useRef } from \"react\"\r\n\r\n\r\nconst useUpdateEffect = (cb, dependencies) => {\r\n    const isInitialRender = useRef(true)\r\n\r\n    useEffect(() => {\r\n        if (isInitialRender.current) {\r\n            isInitialRender.current = false\r\n        } else {\r\n            cb()\r\n        }\r\n    }, dependencies)\r\n}\r\n\r\nexport default useUpdateEffect","import React from \"react\";\r\nimport { Breadcrumb } from \"../../components\";\r\nimport { FaRegPaperPlane } from \"react-icons/fa\";\r\nimport { utilService } from \"../../services/util.service\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport { supportChatService } from \"../../services/supportChat.service\";\r\nimport useScrollDown from \"../../hooks/useScrollDown.hook\";\r\nimport useUpdateEffect from \"../../hooks/useUpdateEffect.hook\";\r\nimport cogoToast from \"@hasanm95/cogo-toast\";\r\nimport { ConstMessages, ConstPosition } from \"../../constants/messages\";\r\n\r\nconst Chat = () => {\r\n  const { currentUser } = useSelector(state => state.user)\r\n  const { register, handleSubmit, reset } = useForm();\r\n  const [messages, setMessages] = useState([])\r\n  const scrollDown = useScrollDown();\r\n\r\n  useEffect(() => {\r\n    loadSupportChat()\r\n  }, [])\r\n\r\n  useUpdateEffect(() => {\r\n    scrollDown()\r\n  }, [messages])\r\n\r\n  const loadSupportChat = useCallback(async () => {\r\n    try {\r\n      const currentUserChatSupport = await supportChatService.query({ chatId: currentUser._id })\r\n\r\n      if (currentUserChatSupport) {\r\n        setMessages(currentUserChatSupport.messages)\r\n      }\r\n\r\n    } catch (error) {\r\n      cogoToast.error(ConstMessages.SOMETHING_WENT_WRONG, { position: ConstPosition.TOP_CENTER });\r\n    }\r\n  }, [])\r\n\r\n\r\n  const onSubmit = useCallback(async ({ text }) => {\r\n    try {\r\n      const messageResponse = await supportChatService.send({ userId: currentUser._id, text, isUserSender: true })\r\n      if (messageResponse) {\r\n        setMessages(prevState => ([...prevState, messageResponse]))\r\n        reset()\r\n      }\r\n    } catch (error) {\r\n      cogoToast.error(ConstMessages.SOMETHING_WENT_WRONG, { position: ConstPosition.TOP_CENTER });\r\n    }\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <div className=\"backgrounds__white-top body-wrapper space-pb--120\">\r\n      <Breadcrumb pageTitle=\"Chat\" />\r\n      <div className=\"chat-area\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-12\">\r\n              <div className=\"chat-wrap\">\r\n                <ul className=\"chat-list\">\r\n                  {\r\n                    messages.map((message, idx) => {\r\n                      return (\r\n                        <li key={idx}>\r\n                          <div className={`chat${message.isUserSender ? \"\" : \" other-message\"}`}>\r\n                            <div className=\"body\">\r\n                              <div className=\"image\">\r\n                                <img\r\n                                  src={\r\n                                    process.env.PUBLIC_URL +\r\n                                    \"/assets/img/comment/comment-1.jpg\"\r\n                                  }\r\n                                  alt=\"\"\r\n                                />\r\n                              </div>\r\n                              <div className=\"content\">\r\n                                <div className=\"head\">\r\n                                  <h5>{message.isUserSender ? \"Me\" : \"Admin\"}</h5>\r\n                                  <span>{utilService.formatTimestamp(new Date(message.createdAt))}</span>\r\n                                </div>\r\n                                <p>{message.content}</p>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </li>\r\n                      )\r\n                    })\r\n                  }\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"chat-submission\">\r\n          <form onSubmit={handleSubmit(onSubmit)}>\r\n            <input name=\"text\" type=\"text\" placeholder=\"Type something\" {...register(\"text\", { required: true })} />\r\n            <div className=\"buttons\">\r\n              <button className=\"submit\">\r\n                <FaRegPaperPlane />\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n"],"names":["ConstMessages","SOMETHING_WENT_WRONG","PLEASE_FILL_OUT_ALL_THE_FIELDS","MESSAGE_SENT","CANNOT_SEND_MESSAGE","ConstPosition","TOP_CENTER","supportChatService","query","send","filterBy","chatId","httpService","SupportChatEP","params","res","status","content","Error","data","options","behavior","handleScrollToBottom","window","scrollTo","top","document","body","scrollHeight","useEffect","cb","dependencies","isInitialRender","useRef","current","currentUser","useSelector","state","user","useForm","register","handleSubmit","reset","useState","messages","setMessages","scrollDown","useScrollDown","loadSupportChat","useUpdateEffect","useCallback","_id","currentUserChatSupport","cogoToast","position","onSubmit","text","userId","isUserSender","messageResponse","prevState","className","pageTitle","map","message","idx","src","alt","utilService","Date","createdAt","name","type","placeholder","required"],"sourceRoot":""}